#! /bin/sh /usr/share/dpatch/dpatch-run
## 90_security_CVE2008-5028.dpatch by Alexander Wirt <formorer@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad nagios3-3.0.3~/base/utils.c nagios3-3.0.3/base/utils.c
--- nagios3-3.0.3~/base/utils.c	2008-06-23 22:47:41.000000000 +0200
+++ nagios3-3.0.3/base/utils.c	2008-11-28 21:17:31.000000000 +0100
@@ -3048,7 +3048,7 @@
 
 		ch=delim[0];
 
-		if(ch=='\0')
+		if(ch=='\0' || begin[0]=='\0')
 			end=NULL;
 		else{
 			if(*begin==ch)
@@ -3483,7 +3483,7 @@
 			}
 
 		/* one backslash found, so we should continue reading the next line */
-		else if(buf[end]=='\\')
+		else if(end>0 && buf[end]=='\\')
 			buf[end]='\x0';
 
 		/* else no continuation marker was found, so break */
diff -urNad nagios3-3.0.3~/cgi/Makefile.in nagios3-3.0.3/cgi/Makefile.in
--- nagios3-3.0.3~/cgi/Makefile.in	2008-02-28 20:26:36.000000000 +0100
+++ nagios3-3.0.3/cgi/Makefile.in	2008-11-28 21:17:31.000000000 +0100
@@ -1,7 +1,7 @@
 ###############################
 # Makefile for Nagios CGIs
 #
-# Last Modified: 09-04-2007
+# Last Modified: 10-30-2008
 ###############################
 
 
@@ -54,6 +54,9 @@
 # Generated automatically from configure script
 SNPRINTF_O=@SNPRINTF_O@
 
+# Anti-CSRF deps
+CSRFDEPS=sha1.o form_session.o extcmd_list.o
+
 # Object functions
 ODATALIBS=objects-cgi.o xobjects-cgi.o
 ODATAHDRS=
@@ -130,8 +133,8 @@
 checksanity.cgi: checksanity.c $(CGIDEPS) $(CDATADEPS) $(DDATADEPS)
 	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ checksanity.c $(CGILIBS) $(CDATALIBS) $(DDATALIBS) $(LIBS)
 
-cmd.cgi: cmd.c $(CGIDEPS) $(CDATADEPS) $(DDATADEPS)
-	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ cmd.c $(CGILIBS) $(CDATALIBS) $(DDATALIBS) $(LIBS)
+cmd.cgi: cmd.c $(CGIDEPS) $(CDATADEPS) $(DDATADEPS) $(CSRFDEPS)
+	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ cmd.c $(CSRFDEPS) $(CGILIBS) $(CDATALIBS) $(DDATALIBS) $(LIBS)
 
 config.cgi: config.c $(CGIDEPS)
 	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ config.c  $(CGILIBS) $(LIBS)
diff -urNad nagios3-3.0.3~/cgi/avail.c nagios3-3.0.3/cgi/avail.c
--- nagios3-3.0.3~/cgi/avail.c	2008-06-23 22:47:42.000000000 +0200
+++ nagios3-3.0.3/cgi/avail.c	2008-11-28 21:17:31.000000000 +0100
@@ -3,7 +3,7 @@
  * AVAIL.C -  Nagios Availability CGI
  *
  * Copyright (c) 2000-2008 Ethan Galstad (nagios@nagios.org)
- * Last Modified: 06-23-2008
+ * Last Modified: 10-15-2008
  *
  * License:
  * 
@@ -510,13 +510,13 @@
 			if(full_log_entries==TRUE)
 				printf("<input type='hidden' name='full_log_entries' value=''>\n");
 			if(display_type==DISPLAY_HOSTGROUP_AVAIL)
-				printf("<input type='hidden' name='hostgroup' value='%s'>\n",hostgroup_name);
+				printf("<input type='hidden' name='hostgroup' value='%s'>\n",escape_string(hostgroup_name));
 			if(display_type==DISPLAY_HOST_AVAIL || display_type==DISPLAY_SERVICE_AVAIL)
-				printf("<input type='hidden' name='host' value='%s'>\n",url_encode(host_name));
+				printf("<input type='hidden' name='host' value='%s'>\n",escape_string(host_name));
 			if(display_type==DISPLAY_SERVICE_AVAIL)
-				printf("<input type='hidden' name='service' value='%s'>\n",svc_description);
+				printf("<input type='hidden' name='service' value='%s'>\n",escape_string(svc_description));
 			if(display_type==DISPLAY_SERVICEGROUP_AVAIL)
-				printf("<input type='hidden' name='servicegroup' value='%s'>\n",url_encode(servicegroup_name));
+				printf("<input type='hidden' name='servicegroup' value='%s'>\n",escape_string(servicegroup_name));
 
 			printf("<input type='hidden' name='assumeinitialstates' value='%s'>\n",(assume_initial_states==TRUE)?"yes":"no");
 			printf("<input type='hidden' name='assumestateretention' value='%s'>\n",(assume_state_retention==TRUE)?"yes":"no");
@@ -645,13 +645,13 @@
 	        printf("<form method=\"get\" action=\"%s\">\n",AVAIL_CGI);
 		printf("<input type='hidden' name='show_log_entries' value=''>\n");
 		if(display_type==DISPLAY_HOSTGROUP_AVAIL)
-			printf("<input type='hidden' name='hostgroup' value='%s'>\n",hostgroup_name);
+			printf("<input type='hidden' name='hostgroup' value='%s'>\n",escape_string(hostgroup_name));
 		if(display_type==DISPLAY_HOST_AVAIL || display_type==DISPLAY_SERVICE_AVAIL)
-			printf("<input type='hidden' name='host' value='%s'>\n",host_name);
+			printf("<input type='hidden' name='host' value='%s'>\n",escape_string(host_name));
 		if(display_type==DISPLAY_SERVICE_AVAIL)
-			printf("<input type='hidden' name='service' value='%s'>\n",svc_description);
+			printf("<input type='hidden' name='service' value='%s'>\n",escape_string(svc_description));
 		if(display_type==DISPLAY_SERVICEGROUP_AVAIL)
-			printf("<input type='hidden' name='servicegroup' value='%s'>\n",servicegroup_name);
+			printf("<input type='hidden' name='servicegroup' value='%s'>\n",escape_string(servicegroup_name));
 
 		printf("<table border=0 cellpadding=5>\n");
 
@@ -736,7 +736,7 @@
 		printf("<option value=\"\">None\n");
 		/* check all the time periods... */
 		for(temp_timeperiod=timeperiod_list;temp_timeperiod!=NULL;temp_timeperiod=temp_timeperiod->next)
-			printf("<option value=%s>%s\n",url_encode(temp_timeperiod->name),temp_timeperiod->name);
+			printf("<option value=%s>%s\n",escape_string(temp_timeperiod->name),temp_timeperiod->name);
 		printf("</select>\n");
 		printf("</td>\n");
 		printf("</tr>\n");
@@ -838,7 +838,7 @@
 		printf("<option value='all'>** ALL HOSTGROUPS **\n");
 		for(temp_hostgroup=hostgroup_list;temp_hostgroup!=NULL;temp_hostgroup=temp_hostgroup->next){
 			if(is_authorized_for_hostgroup(temp_hostgroup,&current_authdata)==TRUE)
-				printf("<option value='%s'>%s\n",temp_hostgroup->group_name,temp_hostgroup->group_name);
+				printf("<option value='%s'>%s\n",escape_string(temp_hostgroup->group_name),temp_hostgroup->group_name);
 		        }
 		printf("</select>\n");
 		printf("</td></tr>\n");
@@ -868,7 +868,7 @@
 		printf("<option value='all'>** ALL HOSTS **\n");
 		for(temp_host=host_list;temp_host!=NULL;temp_host=temp_host->next){
 			if(is_authorized_for_host(temp_host,&current_authdata)==TRUE)
-				printf("<option value='%s'>%s\n",temp_host->name,temp_host->name);
+				printf("<option value='%s'>%s\n",escape_string(temp_host->name),temp_host->name);
 		        }
 		printf("</select>\n");
 		printf("</td></tr>\n");
@@ -900,7 +900,7 @@
 		printf("<option value='all'>** ALL SERVICEGROUPS **\n");
 		for(temp_servicegroup=servicegroup_list;temp_servicegroup!=NULL;temp_servicegroup=temp_servicegroup->next){
 			if(is_authorized_for_servicegroup(temp_servicegroup,&current_authdata)==TRUE)
-				printf("<option value='%s'>%s\n",temp_servicegroup->group_name,temp_servicegroup->group_name);
+				printf("<option value='%s'>%s\n",escape_string(temp_servicegroup->group_name),temp_servicegroup->group_name);
 		        }
 		printf("</select>\n");
 		printf("</td></tr>\n");
@@ -941,7 +941,7 @@
 
 	        printf("<form method=\"get\" action=\"%s\" name='serviceform'>\n",AVAIL_CGI);
 		printf("<input type='hidden' name='get_date_parts'>\n");
-		printf("<input type='hidden' name='host' value='%s'>\n",(firsthostpointer==NULL)?"unknown":firsthostpointer);
+		printf("<input type='hidden' name='host' value='%s'>\n",(firsthostpointer==NULL)?"unknown":(char *)escape_string(firsthostpointer));
 
 		printf("<table border=0 cellpadding=5>\n");
 
@@ -950,7 +950,7 @@
 		printf("<option value='all'>** ALL SERVICES **\n");
 		for(temp_service=service_list;temp_service!=NULL;temp_service=temp_service->next){
 			if(is_authorized_for_service(temp_service,&current_authdata)==TRUE)
-				printf("<option value='%s'>%s;%s\n",temp_service->description,temp_service->host_name,temp_service->description);
+				printf("<option value='%s'>%s;%s\n",escape_string(temp_service->description),temp_service->host_name,temp_service->description);
 		        }
 
 		printf("</select>\n");
diff -urNad nagios3-3.0.3~/cgi/cgiutils.c nagios3-3.0.3/cgi/cgiutils.c
--- nagios3-3.0.3~/cgi/cgiutils.c	2008-06-23 22:47:44.000000000 +0200
+++ nagios3-3.0.3/cgi/cgiutils.c	2008-11-28 21:17:31.000000000 +0100
@@ -3,7 +3,7 @@
  * CGIUTILS.C - Common utilities for Nagios CGIs
  * 
  * Copyright (c) 1999-2008 Ethan Galstad (nagios@nagios.org)
- * Last Modified: 06-23-2008
+ * Last Modified: 11-02-2008
  *
  * License:
  *
@@ -1078,7 +1078,7 @@
 	if(delim[0]=='\0' || delim[1]=='\0'){
 		char ch = delim[0];
 
-		if(ch=='\0')
+		if(ch=='\0' || begin[0]=='\0')
 			end=NULL;
 		else{
 			if(*begin==ch)
@@ -1196,6 +1196,10 @@
 	if(temp_mmapfile==NULL)
 		return NULL;
 
+	/* size of file is 0 bytes */
+	if(temp_mmapfile->file_size==0L)
+		return NULL;
+
 	/* we've reached the end of the file */
 	if(temp_mmapfile->current_position>=temp_mmapfile->file_size)
 		return NULL;
@@ -1285,7 +1289,7 @@
 			}
 
 		/* one backslash found, so we should continue reading the next line */
-		else if(buf[end]=='\\')
+		else if(end>0 && buf[end]=='\\')
 			buf[end]='\x0';
 
 		/* else no continuation marker was found, so break */
@@ -1492,6 +1496,54 @@
 
 
 
+/* escape string for html form usage */
+char * escape_string(char *input){
+	int len,output_len;
+	int x,y;
+	char temp_expansion[10];
+
+	/* we need up to six times the space to do the conversion */
+	len=(int)strlen(input);
+	output_len=len*6;
+	if((encoded_html_string=(char *)malloc(output_len+1))==NULL)
+		return "";
+
+	strcpy(encoded_html_string,"");
+
+	for(x=0,y=0;x<=len;x++){
+
+		/* end of string */
+		if((char)input[x]==(char)'\x0'){
+			encoded_html_string[y]='\x0';
+			break;
+			}
+
+		/* alpha-numeric characters don't get encoded */
+		else if(((char)input[x]>='0' && (char)input[x]<='9') || ((char)input[x]>='A' && (char)input[x]<='Z') || ((char)input[x]>=(char)'a' && (char)input[x]<=(char)'z'))
+			encoded_html_string[y++]=input[x];
+
+		/* spaces, hyphens, periods, underscores and colons don't get encoded */
+		else if(((char)input[x]==(char)' ') || ((char)input[x]==(char)'-') || ((char)input[x]==(char)'.') || ((char)input[x]==(char)'_') || ((char)input[x]==(char)':'))
+			encoded_html_string[y++]=input[x];
+
+		/* for simplicity, all other chars represented by their numeric value */
+		else{
+			encoded_html_string[y]='\x0';
+			sprintf(temp_expansion,"&#%d;",(unsigned char)input[x]);
+			if((int)strlen(encoded_html_string)<(output_len-strlen(temp_expansion))){
+				strcat(encoded_html_string,temp_expansion);
+				y+=strlen(temp_expansion);
+				}
+			}
+	        }
+
+	encoded_html_string[y++]='\x0';
+
+	return encoded_html_string;
+        }
+
+
+
 /* determines the log file we should use (from current time) */
 void get_log_archive_to_use(int archive,char *buffer,int buffer_length){
 	struct tm *t;
diff -urNad nagios3-3.0.3~/cgi/cmd.c nagios3-3.0.3/cgi/cmd.c
--- nagios3-3.0.3~/cgi/cmd.c	2008-05-19 20:42:26.000000000 +0200
+++ nagios3-3.0.3/cgi/cmd.c	2008-11-28 21:17:31.000000000 +0100
@@ -3,7 +3,7 @@
  * CMD.C -  Nagios Command CGI
  *
  * Copyright (c) 1999-2008 Ethan Galstad (nagios@nagios.org)
- * Last Modified: 05-19-2008
+ * Last Modified: 10-30-2008
  *
  * License:
  * 
@@ -30,6 +30,9 @@
 #include "../include/cgiutils.h"
 #include "../include/cgiauth.h"
 #include "../include/getcgi.h"
+#include "form_session.h"
+
+extern const char *extcmd_get_name(int id);
 
 extern char main_config_file[MAX_FILENAME_LENGTH];
 extern char url_html_path[MAX_FILENAME_LENGTH];
@@ -52,7 +55,6 @@
 
 extern int date_format;
 
-
 #define MAX_AUTHOR_LENGTH	64
 #define MAX_COMMENT_LENGTH	1024
 
@@ -636,6 +638,13 @@
 		/* we found the broadcast notification option */
 		else if(!strcmp(variables[x],"broadcast_notification"))
 			broadcast_notification=NOTIFICATION_OPTION_BROADCAST;
+		else if(!strcmp(variables[x],"ncgi_sessid")) {
+			if(variables[++x]==NULL) {
+				error=TRUE;
+				break;
+			}
+			ncgi_session_id = strdup(variables[x]);
+		}
 
                 }
 
@@ -653,6 +662,7 @@
 	char buffer[MAX_INPUT_BUFFER];
 	contact *temp_contact;
 	scheduled_downtime *temp_downtime;
+	const char *anti_csrf_token = NULL;
 
 
 	/* get default name to use for comment author */
@@ -926,9 +936,16 @@
 
 	printf("<DIV ALIGN=CENTER CLASS='optBoxTitle'>Command Options</DIV>\n");
 
+	anti_csrf_token = ifs_get_token();
+	if (!anti_csrf_token) {
+		printf("Failed to obtain in-form session token, used to protect against Cross-Site Request Forgery attacks. Command submission will not work without it\n");
+		exit(0);
+	}
 	printf("<TABLE CELLSPACING=0 CELLPADDING=0 BORDER=1 CLASS='optBox'>\n");
 	printf("<TR><TD CLASS='optBoxItem'>\n");
 	printf("<form method='post' action='%s'>\n", COMMAND_CGI);
+	printf("<INPUT TYPE='HIDDEN' NAME='ncgi_session_id' VALUE='%s'>",
+	       anti_csrf_token);
 	printf("<TABLE CELLSPACING=0 CELLPADDING=0 CLASS='optBox'>\n");
 
 	printf("<tr><td><INPUT TYPE='HIDDEN' NAME='cmd_typ' VALUE='%d'><INPUT TYPE='HIDDEN' NAME='cmd_mod' VALUE='%d'></td></tr>\n",cmd,CMDMODE_COMMIT);
@@ -938,7 +955,7 @@
 	case CMD_ADD_HOST_COMMENT:
 	case CMD_ACKNOWLEDGE_HOST_PROBLEM:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		if(cmd==CMD_ACKNOWLEDGE_HOST_PROBLEM){
 			printf("<tr><td CLASS='optBoxItem'>Sticky Acknowledgement:</td><td><b>");
@@ -952,20 +969,20 @@
 		printf("<INPUT TYPE='checkbox' NAME='persistent' %s>",(cmd==CMD_ACKNOWLEDGE_HOST_PROBLEM)?"":"CHECKED");
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Author (Your Name):</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",url_encode(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
+		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",escape_string(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Comment:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",url_encode(comment_data));
+		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",escape_string(comment_data));
 		printf("</b></td></tr>\n");
 		break;
 		
 	case CMD_ADD_SVC_COMMENT:
 	case CMD_ACKNOWLEDGE_SVC_PROBLEM:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Service:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",service_desc);
+		printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",escape_string(service_desc));
 		if(cmd==CMD_ACKNOWLEDGE_SVC_PROBLEM){
 			printf("<tr><td CLASS='optBoxItem'>Sticky Acknowledgement:</td><td><b>");
 			printf("<INPUT TYPE='checkbox' NAME='sticky_ack' CHECKED>");
@@ -978,10 +995,10 @@
 		printf("<INPUT TYPE='checkbox' NAME='persistent' %s",(cmd==CMD_ACKNOWLEDGE_SVC_PROBLEM)?"":"CHECKED");
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Author (Your Name):</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",url_encode(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
+		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",escape_string(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Comment:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",url_encode(comment_data));
+		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",escape_string(comment_data));
 		printf("</b></td></tr>\n");
 		break;
 
@@ -994,7 +1011,7 @@
 		
 	case CMD_DELAY_HOST_NOTIFICATION:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Notification Delay (minutes from now):</td><td><b>");
 		printf("<INPUT TYPE='TEXT' NAME='not_dly' VALUE='%d'>",notification_delay);
@@ -1003,10 +1020,10 @@
 
 	case CMD_DELAY_SVC_NOTIFICATION:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Service:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",service_desc);
+		printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",escape_string(service_desc));
 		printf("<tr><td CLASS='optBoxRequiredItem'>Notification Delay (minutes from now):</td><td><b>");
 		printf("<INPUT TYPE='TEXT' NAME='not_dly' VALUE='%d'>",notification_delay);
 		printf("</b></td></tr>\n");
@@ -1016,11 +1033,11 @@
 	case CMD_SCHEDULE_HOST_CHECK:
 	case CMD_SCHEDULE_HOST_SVC_CHECKS:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		if(cmd==CMD_SCHEDULE_SVC_CHECK){
 			printf("<tr><td CLASS='optBoxRequiredItem'>Service:</td><td><b>");
-			printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",service_desc);
+			printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",escape_string(service_desc));
 			printf("</b></td></tr>\n");
 		        }
 		time(&t);
@@ -1048,10 +1065,10 @@
 	case CMD_START_OBSESSING_OVER_SVC:
 	case CMD_STOP_OBSESSING_OVER_SVC:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Service:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",service_desc);
+		printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",escape_string(service_desc));
 		printf("</b></td></tr>\n");
 		break;
 		
@@ -1076,7 +1093,7 @@
 	case CMD_START_OBSESSING_OVER_HOST:
 	case CMD_STOP_OBSESSING_OVER_HOST:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		if(cmd==CMD_ENABLE_HOST_SVC_CHECKS || cmd==CMD_DISABLE_HOST_SVC_CHECKS || cmd==CMD_ENABLE_HOST_SVC_NOTIFICATIONS || cmd==CMD_DISABLE_HOST_SVC_NOTIFICATIONS){
 			printf("<tr><td CLASS='optBoxItem'>%s For Host Too:</td><td><b>",(cmd==CMD_ENABLE_HOST_SVC_CHECKS || cmd==CMD_ENABLE_HOST_SVC_NOTIFICATIONS)?"Enable":"Disable");
@@ -1120,11 +1137,11 @@
 	case CMD_PROCESS_HOST_CHECK_RESULT:
 	case CMD_PROCESS_SERVICE_CHECK_RESULT:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		if(cmd==CMD_PROCESS_SERVICE_CHECK_RESULT){
 			printf("<tr><td CLASS='optBoxRequiredItem'>Service:</td><td><b>");
-			printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",service_desc);
+			printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",escape_string(service_desc));
 			printf("</b></td></tr>\n");
 		        }
 		printf("<tr><td CLASS='optBoxRequiredItem'>Check Result:</td><td><b>");
@@ -1154,17 +1171,17 @@
 	case CMD_SCHEDULE_SVC_DOWNTIME:
 
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 		if(cmd==CMD_SCHEDULE_SVC_DOWNTIME){
 			printf("<tr><td CLASS='optBoxRequiredItem'>Service:</td><td><b>");
-			printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",service_desc);
+			printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",escape_string(service_desc));
 		        }
 		printf("<tr><td CLASS='optBoxRequiredItem'>Author (Your Name):</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",url_encode(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
+		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",escape_string(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Comment:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",url_encode(comment_data));
+		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",escape_string(comment_data));
 		printf("</b></td></tr>\n");
 
 		printf("<tr><td CLASS='optBoxItem'><br></td></tr>\n");
@@ -1242,7 +1259,7 @@
 	case CMD_ENABLE_HOSTGROUP_SVC_CHECKS:
 	case CMD_DISABLE_HOSTGROUP_SVC_CHECKS:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Hostgroup Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='hostgroup' VALUE='%s'>",hostgroup_name);
+		printf("<INPUT TYPE='TEXT' NAME='hostgroup' VALUE='%s'>",escape_string(hostgroup_name));
 		printf("</b></td></tr>\n");
 		if(cmd==CMD_ENABLE_HOSTGROUP_SVC_CHECKS || cmd==CMD_DISABLE_HOSTGROUP_SVC_CHECKS || cmd==CMD_ENABLE_HOSTGROUP_SVC_NOTIFICATIONS || cmd==CMD_DISABLE_HOSTGROUP_SVC_NOTIFICATIONS){
 			printf("<tr><td CLASS='optBoxItem'>%s For Hosts Too:</td><td><b>",(cmd==CMD_ENABLE_HOSTGROUP_SVC_CHECKS || cmd==CMD_ENABLE_HOSTGROUP_SVC_NOTIFICATIONS)?"Enable":"Disable");
@@ -1258,7 +1275,7 @@
 	case CMD_ENABLE_SERVICEGROUP_SVC_CHECKS:
 	case CMD_DISABLE_SERVICEGROUP_SVC_CHECKS:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Servicegroup Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='servicegroup' VALUE='%s'>",servicegroup_name);
+		printf("<INPUT TYPE='TEXT' NAME='servicegroup' VALUE='%s'>",escape_string(servicegroup_name));
 		printf("</b></td></tr>\n");
 		if(cmd==CMD_ENABLE_SERVICEGROUP_SVC_CHECKS || cmd==CMD_DISABLE_SERVICEGROUP_SVC_CHECKS || cmd==CMD_ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS || cmd==CMD_DISABLE_SERVICEGROUP_SVC_NOTIFICATIONS){
 			printf("<tr><td CLASS='optBoxItem'>%s For Hosts Too:</td><td><b>",(cmd==CMD_ENABLE_SERVICEGROUP_SVC_CHECKS || cmd==CMD_ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS)?"Enable":"Disable");
@@ -1282,19 +1299,19 @@
 
 		if(cmd==CMD_SCHEDULE_HOSTGROUP_HOST_DOWNTIME || cmd==CMD_SCHEDULE_HOSTGROUP_SVC_DOWNTIME){
 			printf("<tr><td CLASS='optBoxRequiredItem'>Hostgroup Name:</td><td><b>");
-			printf("<INPUT TYPE='TEXT' NAME='hostgroup' VALUE='%s'>",hostgroup_name);
+			printf("<INPUT TYPE='TEXT' NAME='hostgroup' VALUE='%s'>",escape_string(hostgroup_name));
 			printf("</b></td></tr>\n");
 		        }
 		else{
 			printf("<tr><td CLASS='optBoxRequiredItem'>Servicegroup Name:</td><td><b>");
-			printf("<INPUT TYPE='TEXT' NAME='servicegroup' VALUE='%s'>",servicegroup_name);
+			printf("<INPUT TYPE='TEXT' NAME='servicegroup' VALUE='%s'>",escape_string(servicegroup_name));
 			printf("</b></td></tr>\n");
 		        }
 		printf("<tr><td CLASS='optBoxRequiredItem'>Author (Your Name):</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",url_encode(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
+		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",escape_string(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Comment:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",url_encode(comment_data));
+		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",escape_string(comment_data));
 		printf("</b></td></tr>\n");
 		time(&t);
 		get_time_string(&t,buffer,sizeof(buffer)-1,SHORT_DATE_TIME);
@@ -1331,12 +1348,12 @@
 	case CMD_SEND_CUSTOM_HOST_NOTIFICATION:
 	case CMD_SEND_CUSTOM_SVC_NOTIFICATION:
 		printf("<tr><td CLASS='optBoxRequiredItem'>Host Name:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",host_name);
+		printf("<INPUT TYPE='TEXT' NAME='host' VALUE='%s'>",escape_string(host_name));
 		printf("</b></td></tr>\n");
 
 		if(cmd==CMD_SEND_CUSTOM_SVC_NOTIFICATION){
 			printf("<tr><td CLASS='optBoxRequiredItem'>Service:</td><td><b>");
-			printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",service_desc);
+			printf("<INPUT TYPE='TEXT' NAME='service' VALUE='%s'>",escape_string(service_desc));
 			printf("</b></td></tr>\n");
 			}
 
@@ -1349,10 +1366,10 @@
 		printf("</b></td></tr>\n");
 
 		printf("<tr><td CLASS='optBoxRequiredItem'>Author (Your Name):</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",url_encode(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
+		printf("<INPUT TYPE='TEXT' NAME='com_author' VALUE='%s' %s>",escape_string(comment_author),(lock_author_names==TRUE)?"READONLY DISABLED":"");
 		printf("</b></td></tr>\n");
 		printf("<tr><td CLASS='optBoxRequiredItem'>Comment:</td><td><b>");
-		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",url_encode(comment_data));
+		printf("<INPUT TYPE='TEXT' NAME='com_data' VALUE='%s' SIZE=40>",escape_string(comment_data));
 		printf("</b></td></tr>\n");
 		break;
 
@@ -1883,10 +1900,42 @@
 	return;
         }
 
+__attribute__((format(printf, 2, 3)))
+static int cmd_submitf(int id, const char *fmt, ...)
+{
+	char cmd[MAX_EXTERNAL_COMMAND_LENGTH];
+	const char *command;
+	int len;
+
+	command = extcmd_get_name(id);
+	/*
+	 * We disallow sending 'CHANGE' commands from the cgi's
+	 * until we do proper session handling to prevent cross-site
+	 * request forgery
+	 */
+	if (!command || (strlen(command) > 6 && !memcmp("CHANGE", command, 6)))
+		return ERROR;
+
+	len = snprintf(cmd, sizeof(cmd) - 1, "[%lu] %s;", time(NULL), command);
+	if (len < 0)
+		return ERROR;
+
+	if (fmt) {
+		va_list ap;
+		int len2;
+
+		va_start(ap, fmt);
+		len2 = vsnprintf(&cmd[len], sizeof(cmd) - len - 1, fmt, ap);
+		va_end(ap);
+		if (len2 < 0)
+			return ERROR;
+	}
+
+	return write_command_to_file(cmd);
+}
 
 /* commits a command for processing */
 int commit_command(int cmd){
-	char command_buffer[MAX_INPUT_BUFFER];
 	time_t current_time;
 	time_t scheduled_time;
 	time_t notification_time;
@@ -1901,248 +1950,195 @@
 	/* get the notification time */
 	notification_time=current_time+(notification_delay*60);
 
+	/*
+	 * these are supposed to be implanted inside the
+	 * completed commands shipped off to nagios and
+	 * must therefore never contain ';'
+	 */
+	if (host_name && strchr(host_name, ';'))
+		return ERROR;
+	if (service_desc && strchr(service_desc, ';'))
+		return ERROR;
+	if (comment_author && strchr(comment_author, ';'))
+		return ERROR;
+	if (hostgroup_name && strchr(hostgroup_name, ';'))
+		return ERROR;
+	if (servicegroup_name && strchr(servicegroup_name, ';'))
+		return ERROR;
+
 	/* decide how to form the command line... */
 	switch(cmd){
 
-	case CMD_ADD_HOST_COMMENT:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] ADD_HOST_COMMENT;%s;%d;%s;%s\n",current_time,host_name,(persistent_comment==TRUE)?1:0,comment_author,comment_data);
+		/* commands without arguments */
+	case CMD_START_EXECUTING_SVC_CHECKS:
+	case CMD_STOP_EXECUTING_SVC_CHECKS:
+	case CMD_START_ACCEPTING_PASSIVE_SVC_CHECKS:
+	case CMD_STOP_ACCEPTING_PASSIVE_SVC_CHECKS:
+	case CMD_ENABLE_EVENT_HANDLERS:
+	case CMD_DISABLE_EVENT_HANDLERS:
+	case CMD_START_OBSESSING_OVER_SVC_CHECKS:
+	case CMD_STOP_OBSESSING_OVER_SVC_CHECKS:
+	case CMD_ENABLE_FLAP_DETECTION:
+	case CMD_DISABLE_FLAP_DETECTION:
+	case CMD_ENABLE_FAILURE_PREDICTION:
+	case CMD_DISABLE_FAILURE_PREDICTION:
+	case CMD_ENABLE_PERFORMANCE_DATA:
+	case CMD_DISABLE_PERFORMANCE_DATA:
+	case CMD_START_EXECUTING_HOST_CHECKS:
+	case CMD_STOP_EXECUTING_HOST_CHECKS:
+	case CMD_START_ACCEPTING_PASSIVE_HOST_CHECKS:
+	case CMD_STOP_ACCEPTING_PASSIVE_HOST_CHECKS:
+	case CMD_START_OBSESSING_OVER_HOST_CHECKS:
+	case CMD_STOP_OBSESSING_OVER_HOST_CHECKS:
+		result = cmd_submitf(cmd,NULL);
+		break;
+
+		/** simple host commands **/
+	case CMD_ENABLE_HOST_FLAP_DETECTION:
+	case CMD_DISABLE_HOST_FLAP_DETECTION:
+	case CMD_ENABLE_PASSIVE_HOST_CHECKS:
+	case CMD_DISABLE_PASSIVE_HOST_CHECKS:
+	case CMD_START_OBSESSING_OVER_HOST:
+	case CMD_STOP_OBSESSING_OVER_HOST:
+	case CMD_DEL_ALL_HOST_COMMENTS:
+	case CMD_ENABLE_ALL_NOTIFICATIONS_BEYOND_HOST:
+	case CMD_DISABLE_ALL_NOTIFICATIONS_BEYOND_HOST:
+	case CMD_ENABLE_HOST_EVENT_HANDLER:
+	case CMD_DISABLE_HOST_EVENT_HANDLER:
+	case CMD_ENABLE_HOST_CHECK:
+	case CMD_DISABLE_HOST_CHECK:
+	case CMD_REMOVE_HOST_ACKNOWLEDGEMENT:
+		result = cmd_submitf(cmd,"%s",host_name);
+		break;
+
+		/** simple service commands **/
+	case CMD_ENABLE_SVC_FLAP_DETECTION:
+	case CMD_DISABLE_SVC_FLAP_DETECTION:
+	case CMD_ENABLE_PASSIVE_SVC_CHECKS:
+	case CMD_DISABLE_PASSIVE_SVC_CHECKS:
+	case CMD_START_OBSESSING_OVER_SVC:
+	case CMD_STOP_OBSESSING_OVER_SVC:
+	case CMD_DEL_ALL_SVC_COMMENTS:
+	case CMD_ENABLE_SVC_NOTIFICATIONS:
+	case CMD_DISABLE_SVC_NOTIFICATIONS:
+	case CMD_ENABLE_SVC_EVENT_HANDLER:
+	case CMD_DISABLE_SVC_EVENT_HANDLER:
+	case CMD_ENABLE_SVC_CHECK:
+	case CMD_DISABLE_SVC_CHECK:
+	case CMD_REMOVE_SVC_ACKNOWLEDGEMENT:
+		result = cmd_submitf(cmd,"%s;%s",host_name,service_desc);
 		break;
 		
+	case CMD_ADD_HOST_COMMENT:
+		result = cmd_submitf(cmd,"%s;%d;%s;%s",host_name,persistent_comment,comment_author,comment_data);
+		break;
+
 	case CMD_ADD_SVC_COMMENT:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] ADD_SVC_COMMENT;%s;%s;%d;%s;%s\n",current_time,host_name,service_desc,(persistent_comment==TRUE)?1:0,comment_author,comment_data);
+		result = cmd_submitf(cmd,"%s;%s;%d;%s;%s",host_name,service_desc,persistent_comment,comment_author,comment_data);
 		break;
 
 	case CMD_DEL_HOST_COMMENT:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] DEL_HOST_COMMENT;%lu\n",current_time,comment_id);
-		break;
-		
 	case CMD_DEL_SVC_COMMENT:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] DEL_SVC_COMMENT;%lu\n",current_time,comment_id);
+		result = cmd_submitf(cmd,"%lu",comment_id);
 		break;
 		
 	case CMD_DELAY_HOST_NOTIFICATION:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] DELAY_HOST_NOTIFICATION;%s;%lu\n",current_time,host_name,notification_time);
+		result = cmd_submitf(cmd,"%s;%lu",host_name,notification_time);
 		break;
 
 	case CMD_DELAY_SVC_NOTIFICATION:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] DELAY_SVC_NOTIFICATION;%s;%s;%lu\n",current_time,host_name,service_desc,notification_time);
+		result = cmd_submitf(cmd,"%s;%s;%lu",host_name,service_desc,notification_time);
 		break;
 
 	case CMD_SCHEDULE_SVC_CHECK:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_%sSVC_CHECK;%s;%s;%lu\n",current_time,(force_check==TRUE)?"FORCED_":"",host_name,service_desc,start_time);
+	case CMD_SCHEDULE_FORCED_SVC_CHECK:
+		result = cmd_submitf(cmd,"%s;%s;%lu",host_name,service_desc,start_time);
 		break;
 
-	case CMD_ENABLE_SVC_CHECK:
-	case CMD_DISABLE_SVC_CHECK:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SVC_CHECK;%s;%s\n",current_time,(cmd==CMD_ENABLE_SVC_CHECK)?"ENABLE":"DISABLE",host_name,service_desc);
-		break;
-		
 	case CMD_DISABLE_NOTIFICATIONS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] DISABLE_NOTIFICATIONS;%lu\n",current_time,scheduled_time);
-		break;
-		
 	case CMD_ENABLE_NOTIFICATIONS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] ENABLE_NOTIFICATIONS;%lu\n",current_time,scheduled_time);
-		break;
-		
 	case CMD_SHUTDOWN_PROCESS:
 	case CMD_RESTART_PROCESS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_PROGRAM;%lu\n",current_time,(cmd==CMD_SHUTDOWN_PROCESS)?"SHUTDOWN":"RESTART",scheduled_time);
+		result = cmd_submitf(cmd,"%lu",scheduled_time);
 		break;
 
 	case CMD_ENABLE_HOST_SVC_CHECKS:
 	case CMD_DISABLE_HOST_SVC_CHECKS:
-		if(affect_host_and_services==FALSE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_SVC_CHECKS;%s\n",current_time,(cmd==CMD_ENABLE_HOST_SVC_CHECKS)?"ENABLE":"DISABLE",host_name);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_SVC_CHECKS;%s\n[%lu] %s_HOST_CHECK;%s\n",current_time,(cmd==CMD_ENABLE_HOST_SVC_CHECKS)?"ENABLE":"DISABLE",host_name,current_time,(cmd==CMD_ENABLE_HOST_SVC_CHECKS)?"ENABLE":"DISABLE",host_name);
+		result = cmd_submitf(cmd,"%s",host_name);
+		if(affect_host_and_services==TRUE) {
+			cmd = (cmd == CMD_ENABLE_HOST_SVC_CHECKS) ? CMD_ENABLE_HOST_CHECK : CMD_DISABLE_HOST_CHECK;
+			result |= cmd_submitf(cmd,"%s",host_name);
+		}
 		break;
 		
 	case CMD_SCHEDULE_HOST_SVC_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_%sHOST_SVC_CHECKS;%s;%lu\n",current_time,(force_check==TRUE)?"FORCED_":"",host_name,scheduled_time);
-		break;
-
-	case CMD_DEL_ALL_HOST_COMMENTS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] DEL_ALL_HOST_COMMENTS;%s\n",current_time,host_name);
-		break;
-		
-	case CMD_DEL_ALL_SVC_COMMENTS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] DEL_ALL_SVC_COMMENTS;%s;%s\n",current_time,host_name,service_desc);
+		if (force_check == TRUE)
+			cmd = CMD_SCHEDULE_FORCED_HOST_SVC_CHECKS;
+		result = cmd_submitf(cmd,"%s;%lu",host_name,scheduled_time);
 		break;
 
-	case CMD_ENABLE_SVC_NOTIFICATIONS:
-	case CMD_DISABLE_SVC_NOTIFICATIONS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SVC_NOTIFICATIONS;%s;%s\n",current_time,(cmd==CMD_ENABLE_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",host_name,service_desc);
-		break;
-		
 	case CMD_ENABLE_HOST_NOTIFICATIONS:
 	case CMD_DISABLE_HOST_NOTIFICATIONS:
 		if(propagate_to_children==TRUE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_AND_CHILD_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_HOST_NOTIFICATIONS)?"ENABLE":"DISABLE",host_name);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_HOST_NOTIFICATIONS)?"ENABLE":"DISABLE",host_name);
-		break;
-		
-	case CMD_ENABLE_ALL_NOTIFICATIONS_BEYOND_HOST:
-	case CMD_DISABLE_ALL_NOTIFICATIONS_BEYOND_HOST:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_ALL_NOTIFICATIONS_BEYOND_HOST;%s\n",current_time,(cmd==CMD_ENABLE_ALL_NOTIFICATIONS_BEYOND_HOST)?"ENABLE":"DISABLE",host_name);
+			cmd = (cmd == CMD_ENABLE_HOST_NOTIFICATIONS) ? CMD_ENABLE_HOST_AND_CHILD_NOTIFICATIONS : CMD_DISABLE_HOST_AND_CHILD_NOTIFICATIONS;
+		result = cmd_submitf(cmd,"%s",host_name);
 		break;
 		
 	case CMD_ENABLE_HOST_SVC_NOTIFICATIONS:
 	case CMD_DISABLE_HOST_SVC_NOTIFICATIONS:
-		if(affect_host_and_services==FALSE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_SVC_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_HOST_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",host_name);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_SVC_NOTIFICATIONS;%s\n[%lu] %s_HOST_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_HOST_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",host_name,current_time,(cmd==CMD_ENABLE_HOST_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",host_name);
+		result = cmd_submitf(cmd,"%s",host_name);
+		if(affect_host_and_services==TRUE) {
+			cmd = (cmd == CMD_ENABLE_HOST_SVC_NOTIFICATIONS) ? CMD_ENABLE_HOST_NOTIFICATIONS : CMD_DISABLE_HOST_NOTIFICATIONS;
+			result |= cmd_submitf(cmd,"%s",host_name);
+		}
 		break;
 		
 	case CMD_ACKNOWLEDGE_HOST_PROBLEM:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] ACKNOWLEDGE_HOST_PROBLEM;%s;%d;%d;%d;%s;%s\n",current_time,host_name,(sticky_ack==TRUE)?ACKNOWLEDGEMENT_STICKY:ACKNOWLEDGEMENT_NORMAL,(send_notification==TRUE)?1:0,(persistent_comment==TRUE)?1:0,comment_author,comment_data);
+		result = cmd_submitf(cmd,"%s;%d;%d;%d;%s;%s",host_name,(sticky_ack==TRUE)?ACKNOWLEDGEMENT_STICKY:ACKNOWLEDGEMENT_NORMAL,send_notification,persistent_comment,comment_author,comment_data);
 		break;
 		
 	case CMD_ACKNOWLEDGE_SVC_PROBLEM:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] ACKNOWLEDGE_SVC_PROBLEM;%s;%s;%d;%d;%d;%s;%s\n",current_time,host_name,service_desc,(sticky_ack==TRUE)?ACKNOWLEDGEMENT_STICKY:ACKNOWLEDGEMENT_NORMAL,(send_notification==TRUE)?1:0,(persistent_comment==TRUE)?1:0,comment_author,comment_data);
-		break;
-
-	case CMD_START_EXECUTING_SVC_CHECKS:
-	case CMD_STOP_EXECUTING_SVC_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_EXECUTING_SVC_CHECKS;\n",current_time,(cmd==CMD_START_EXECUTING_SVC_CHECKS)?"START":"STOP");
-		break;
-
-	case CMD_START_ACCEPTING_PASSIVE_SVC_CHECKS:
-	case CMD_STOP_ACCEPTING_PASSIVE_SVC_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_ACCEPTING_PASSIVE_SVC_CHECKS;\n",current_time,(cmd==CMD_START_ACCEPTING_PASSIVE_SVC_CHECKS)?"START":"STOP");
-		break;
-
-	case CMD_ENABLE_PASSIVE_SVC_CHECKS:
-	case CMD_DISABLE_PASSIVE_SVC_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_PASSIVE_SVC_CHECKS;%s;%s\n",current_time,(cmd==CMD_ENABLE_PASSIVE_SVC_CHECKS)?"ENABLE":"DISABLE",host_name,service_desc);
-		break;
-		
-	case CMD_ENABLE_EVENT_HANDLERS:
-	case CMD_DISABLE_EVENT_HANDLERS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_EVENT_HANDLERS;\n",current_time,(cmd==CMD_ENABLE_EVENT_HANDLERS)?"ENABLE":"DISABLE");
+		result = cmd_submitf(cmd,"%s;%s;%d;%d;%d;%s;%s",host_name,service_desc,(sticky_ack==TRUE)?ACKNOWLEDGEMENT_STICKY:ACKNOWLEDGEMENT_NORMAL,send_notification,persistent_comment,comment_author,comment_data);
 		break;
 
-	case CMD_ENABLE_SVC_EVENT_HANDLER:
-	case CMD_DISABLE_SVC_EVENT_HANDLER:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SVC_EVENT_HANDLER;%s;%s\n",current_time,(cmd==CMD_ENABLE_SVC_EVENT_HANDLER)?"ENABLE":"DISABLE",host_name,service_desc);
-		break;
-		
-	case CMD_ENABLE_HOST_EVENT_HANDLER:
-	case CMD_DISABLE_HOST_EVENT_HANDLER:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_EVENT_HANDLER;%s\n",current_time,(cmd==CMD_ENABLE_HOST_EVENT_HANDLER)?"ENABLE":"DISABLE",host_name);
-		break;
-		
-	case CMD_ENABLE_HOST_CHECK:
-	case CMD_DISABLE_HOST_CHECK:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_CHECK;%s\n",current_time,(cmd==CMD_ENABLE_HOST_CHECK)?"ENABLE":"DISABLE",host_name);
-		break;
-		
-	case CMD_START_OBSESSING_OVER_SVC_CHECKS:
-	case CMD_STOP_OBSESSING_OVER_SVC_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_OBSESSING_OVER_SVC_CHECKS;\n",current_time,(cmd==CMD_START_OBSESSING_OVER_SVC_CHECKS)?"START":"STOP");
-		break;
-		
-	case CMD_REMOVE_HOST_ACKNOWLEDGEMENT:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] REMOVE_HOST_ACKNOWLEDGEMENT;%s\n",current_time,host_name);
-		break;
-		
-	case CMD_REMOVE_SVC_ACKNOWLEDGEMENT:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] REMOVE_SVC_ACKNOWLEDGEMENT;%s;%s\n",current_time,host_name,service_desc);
-		break;
-		
 	case CMD_PROCESS_SERVICE_CHECK_RESULT:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] PROCESS_SERVICE_CHECK_RESULT;%s;%s;%d;%s|%s\n",current_time,host_name,service_desc,plugin_state,plugin_output,performance_data);
+		result = cmd_submitf(cmd,"%s;%s;%d;%s|%s",host_name,service_desc,plugin_state,plugin_output,performance_data);
 		break;
 		
 	case CMD_PROCESS_HOST_CHECK_RESULT:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] PROCESS_HOST_CHECK_RESULT;%s;%d;%s|%s\n",current_time,host_name,plugin_state,plugin_output,performance_data);
+		result = cmd_submitf(cmd,"%s;%d;%s|%s",host_name,plugin_state,plugin_output,performance_data);
 		break;
 		
 	case CMD_SCHEDULE_HOST_DOWNTIME:
 		if(child_options==1)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_AND_PROPAGATE_TRIGGERED_HOST_DOWNTIME;%s;%lu;%lu;%d;%lu;%lu;%s;%s\n",current_time,host_name,start_time,end_time,(fixed==TRUE)?1:0,triggered_by,duration,comment_author,comment_data);
-		else if(child_options==2)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_AND_PROPAGATE_HOST_DOWNTIME;%s;%lu;%lu;%d;%lu;%lu;%s;%s\n",current_time,host_name,start_time,end_time,(fixed==TRUE)?1:0,triggered_by,duration,comment_author,comment_data);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_HOST_DOWNTIME;%s;%lu;%lu;%d;%lu;%lu;%s;%s\n",current_time,host_name,start_time,end_time,(fixed==TRUE)?1:0,triggered_by,duration,comment_author,comment_data);
-		break;
-		
-	case CMD_SCHEDULE_SVC_DOWNTIME:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_SVC_DOWNTIME;%s;%s;%lu;%lu;%d;%lu;%lu;%s;%s\n",current_time,host_name,service_desc,start_time,end_time,(fixed==TRUE)?1:0,triggered_by,duration,comment_author,comment_data);
-		break;
-		
-	case CMD_ENABLE_HOST_FLAP_DETECTION:
-	case CMD_DISABLE_HOST_FLAP_DETECTION:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOST_FLAP_DETECTION;%s\n",current_time,(cmd==CMD_ENABLE_HOST_FLAP_DETECTION)?"ENABLE":"DISABLE",host_name);
-		break;
+			cmd = CMD_SCHEDULE_AND_PROPAGATE_TRIGGERED_HOST_DOWNTIME;
+		else if (child_options == 2)
+			cmd = CMD_SCHEDULE_AND_PROPAGATE_HOST_DOWNTIME;
 		
-	case CMD_ENABLE_SVC_FLAP_DETECTION:
-	case CMD_DISABLE_SVC_FLAP_DETECTION:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SVC_FLAP_DETECTION;%s;%s\n",current_time,(cmd==CMD_ENABLE_SVC_FLAP_DETECTION)?"ENABLE":"DISABLE",host_name,service_desc);
+		result = cmd_submitf(cmd,"%s;%lu;%lu;%d;%lu;%lu;%s;%s",host_name,start_time,end_time,fixed,triggered_by,duration,comment_author,comment_data);
 		break;
 		
-	case CMD_ENABLE_FLAP_DETECTION:
-	case CMD_DISABLE_FLAP_DETECTION:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_FLAP_DETECTION\n",current_time,(cmd==CMD_ENABLE_FLAP_DETECTION)?"ENABLE":"DISABLE");
+	case CMD_SCHEDULE_SVC_DOWNTIME:
+		result = cmd_submitf(cmd,"%s;%s;%lu;%lu;%d;%lu;%lu;%s;%s",host_name,service_desc,start_time,end_time,fixed,triggered_by,duration,comment_author,comment_data);
 		break;
 		
 	case CMD_DEL_HOST_DOWNTIME:
 	case CMD_DEL_SVC_DOWNTIME:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] DEL_%s_DOWNTIME;%lu\n",current_time,(cmd==CMD_DEL_HOST_DOWNTIME)?"HOST":"SVC",downtime_id);
-		break;
-
-	case CMD_ENABLE_FAILURE_PREDICTION:
-	case CMD_DISABLE_FAILURE_PREDICTION:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_FAILURE_PREDICTION\n",current_time,(cmd==CMD_ENABLE_FAILURE_PREDICTION)?"ENABLE":"DISABLE");
-		break;
-		
-	case CMD_ENABLE_PERFORMANCE_DATA:
-	case CMD_DISABLE_PERFORMANCE_DATA:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_PERFORMANCE_DATA\n",current_time,(cmd==CMD_ENABLE_PERFORMANCE_DATA)?"ENABLE":"DISABLE");
-		break;
-		
-	case CMD_START_EXECUTING_HOST_CHECKS:
-	case CMD_STOP_EXECUTING_HOST_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_EXECUTING_HOST_CHECKS;\n",current_time,(cmd==CMD_START_EXECUTING_HOST_CHECKS)?"START":"STOP");
-		break;
-
-	case CMD_START_ACCEPTING_PASSIVE_HOST_CHECKS:
-	case CMD_STOP_ACCEPTING_PASSIVE_HOST_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_ACCEPTING_PASSIVE_HOST_CHECKS;\n",current_time,(cmd==CMD_START_ACCEPTING_PASSIVE_HOST_CHECKS)?"START":"STOP");
-		break;
-
-	case CMD_ENABLE_PASSIVE_HOST_CHECKS:
-	case CMD_DISABLE_PASSIVE_HOST_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_PASSIVE_HOST_CHECKS;%s\n",current_time,(cmd==CMD_ENABLE_PASSIVE_HOST_CHECKS)?"ENABLE":"DISABLE",host_name);
-		break;
-
-	case CMD_START_OBSESSING_OVER_HOST_CHECKS:
-	case CMD_STOP_OBSESSING_OVER_HOST_CHECKS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_OBSESSING_OVER_HOST_CHECKS;\n",current_time,(cmd==CMD_START_OBSESSING_OVER_HOST_CHECKS)?"START":"STOP");
+		result = cmd_submitf(cmd,"%lu",downtime_id);
 		break;
 
 	case CMD_SCHEDULE_HOST_CHECK:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_%sHOST_CHECK;%s;%lu\n",current_time,(force_check==TRUE)?"FORCED_":"",host_name,start_time);
-		break;
-
-	case CMD_START_OBSESSING_OVER_SVC:
-	case CMD_STOP_OBSESSING_OVER_SVC:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_OBSESSING_OVER_SVC;%s;%s\n",current_time,(cmd==CMD_START_OBSESSING_OVER_SVC)?"START":"STOP",host_name,service_desc);
-		break;
-
-	case CMD_START_OBSESSING_OVER_HOST:
-	case CMD_STOP_OBSESSING_OVER_HOST:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_OBSESSING_OVER_HOST;%s\n",current_time,(cmd==CMD_START_OBSESSING_OVER_HOST)?"START":"STOP",host_name);
+		if (force_check == TRUE)
+			cmd = CMD_SCHEDULE_FORCED_HOST_CHECK;
+		result = cmd_submitf(cmd,"%s;%lu",host_name,start_time);
 		break;
 
 	case CMD_SEND_CUSTOM_HOST_NOTIFICATION:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SEND_CUSTOM_HOST_NOTIFICATION;%s;%d;%s;%s\n",current_time,host_name,(force_notification | broadcast_notification),comment_author,comment_data);
+		result = cmd_submitf(cmd,"%s;%d;%s;%s",host_name,(force_notification | broadcast_notification),comment_author,comment_data);
 		break;
 
 	case CMD_SEND_CUSTOM_SVC_NOTIFICATION:
-			 snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SEND_CUSTOM_SVC_NOTIFICATION;%s;%s;%d;%s;%s\n",current_time,host_name,service_desc,(force_notification | broadcast_notification),comment_author,comment_data);
+		result = cmd_submitf(cmd,"%s;%s;%d;%s;%s",host_name,service_desc,(force_notification | broadcast_notification),comment_author,comment_data);
 		break;
 
 
@@ -2150,34 +2146,35 @@
 
 	case CMD_ENABLE_HOSTGROUP_SVC_NOTIFICATIONS:
 	case CMD_DISABLE_HOSTGROUP_SVC_NOTIFICATIONS:
-		if(affect_host_and_services==FALSE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOSTGROUP_SVC_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_HOSTGROUP_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",hostgroup_name);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOSTGROUP_SVC_NOTIFICATIONS;%s\n[%lu] %s_HOSTGROUP_HOST_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_HOSTGROUP_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",hostgroup_name,current_time,(cmd==CMD_ENABLE_HOSTGROUP_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",hostgroup_name);
+		result = cmd_submitf(cmd,"%s",hostgroup_name);
+		if(affect_host_and_services==TRUE) {
+			cmd = (cmd == CMD_ENABLE_HOSTGROUP_SVC_NOTIFICATIONS) ? CMD_ENABLE_HOSTGROUP_HOST_NOTIFICATIONS : CMD_DISABLE_HOSTGROUP_HOST_NOTIFICATIONS;
+			result |= cmd_submitf(cmd,"%s",hostgroup_name);
+		}
 		break;
 
 	case CMD_ENABLE_HOSTGROUP_HOST_NOTIFICATIONS:
 	case CMD_DISABLE_HOSTGROUP_HOST_NOTIFICATIONS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOSTGROUP_HOST_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_HOSTGROUP_HOST_NOTIFICATIONS)?"ENABLE":"DISABLE",hostgroup_name);
+		result = cmd_submitf(cmd,"%s",hostgroup_name);
 		break;
 
 	case CMD_ENABLE_HOSTGROUP_SVC_CHECKS:
 	case CMD_DISABLE_HOSTGROUP_SVC_CHECKS:
-		if(affect_host_and_services==FALSE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOSTGROUP_SVC_CHECKS;%s\n",current_time,(cmd==CMD_ENABLE_HOSTGROUP_SVC_CHECKS)?"ENABLE":"DISABLE",hostgroup_name);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_HOSTGROUP_SVC_CHECKS;%s\n[%lu] %s_HOSTGROUP_HOST_CHECKS;%s\n",current_time,(cmd==CMD_ENABLE_HOSTGROUP_SVC_CHECKS)?"ENABLE":"DISABLE",hostgroup_name,current_time,(cmd==CMD_ENABLE_HOSTGROUP_SVC_CHECKS)?"ENABLE":"DISABLE",hostgroup_name);
+		result = cmd_submitf(cmd,"%s",hostgroup_name);
+		if(affect_host_and_services==TRUE) {
+			cmd = (cmd == CMD_ENABLE_HOSTGROUP_SVC_CHECKS) ? CMD_ENABLE_HOSTGROUP_HOST_CHECKS : CMD_DISABLE_HOSTGROUP_HOST_CHECKS;
+			result |= cmd_submitf(cmd,"%s",hostgroup_name);
+		}
 		break;
 
 	case CMD_SCHEDULE_HOSTGROUP_HOST_DOWNTIME:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_HOSTGROUP_HOST_DOWNTIME;%s;%lu;%lu;%d;0;%lu;%s;%s\n",current_time,hostgroup_name,start_time,end_time,(fixed==TRUE)?1:0,duration,comment_author,comment_data);
+		result = cmd_submitf(cmd,"%s;%lu;%lu;%d;0;%lu;%s;%s",hostgroup_name,start_time,end_time,fixed,duration,comment_author,comment_data);
 		break;
 
 	case CMD_SCHEDULE_HOSTGROUP_SVC_DOWNTIME:
-		if(affect_host_and_services==FALSE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_HOSTGROUP_SVC_DOWNTIME;%s;%lu;%lu;%d;0;%lu;%s;%s\n",current_time,hostgroup_name,start_time,end_time,(fixed==TRUE)?1:0,duration,comment_author,comment_data);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_HOSTGROUP_SVC_DOWNTIME;%s;%lu;%lu;%d;0;%lu;%s;%s\n[%lu] SCHEDULE_HOSTGROUP_HOST_DOWNTIME;%s;%lu;%lu;%d;0;%lu;%s;%s\n",current_time,hostgroup_name,start_time,end_time,(fixed==TRUE)?1:0,duration,comment_author,comment_data,current_time,hostgroup_name,start_time,end_time,(fixed==TRUE)?1:0,duration,comment_author,comment_data);
+		result = cmd_submitf(cmd,"%s;%lu;%lu;%d;0;%lu;%s;%s",hostgroup_name,start_time,end_time,fixed,duration,comment_author,comment_data);
+		if(affect_host_and_services==TRUE)
+			result |= cmd_submitf(CMD_SCHEDULE_HOSTGROUP_HOST_DOWNTIME,"%s;%lu;%lu;%d;0;%lu;%s;%s",hostgroup_name,start_time,end_time,fixed,duration,comment_author,comment_data);
 		break;
 
 
@@ -2185,34 +2182,35 @@
 
 	case CMD_ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS:
 	case CMD_DISABLE_SERVICEGROUP_SVC_NOTIFICATIONS:
-		if(affect_host_and_services==FALSE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SERVICEGROUP_SVC_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",servicegroup_name);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SERVICEGROUP_SVC_NOTIFICATIONS;%s\n[%lu] %s_SERVICEGROUP_HOST_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",servicegroup_name,current_time,(cmd==CMD_ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS)?"ENABLE":"DISABLE",servicegroup_name);
+		result = cmd_submitf(cmd,"%s",servicegroup_name);
+		if(affect_host_and_services==TRUE) {
+			cmd = (cmd == CMD_ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS) ? CMD_ENABLE_SERVICEGROUP_HOST_NOTIFICATIONS : CMD_DISABLE_SERVICEGROUP_HOST_NOTIFICATIONS;
+			result |= cmd_submitf(cmd,"%s",servicegroup_name);
+		}
 		break;
 
 	case CMD_ENABLE_SERVICEGROUP_HOST_NOTIFICATIONS:
 	case CMD_DISABLE_SERVICEGROUP_HOST_NOTIFICATIONS:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SERVICEGROUP_HOST_NOTIFICATIONS;%s\n",current_time,(cmd==CMD_ENABLE_SERVICEGROUP_HOST_NOTIFICATIONS)?"ENABLE":"DISABLE",servicegroup_name);
+		result = cmd_submitf(cmd,"%s",servicegroup_name);
 		break;
 
 	case CMD_ENABLE_SERVICEGROUP_SVC_CHECKS:
 	case CMD_DISABLE_SERVICEGROUP_SVC_CHECKS:
-		if(affect_host_and_services==FALSE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SERVICEGROUP_SVC_CHECKS;%s\n",current_time,(cmd==CMD_ENABLE_SERVICEGROUP_SVC_CHECKS)?"ENABLE":"DISABLE",servicegroup_name);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] %s_SERVICEGROUP_SVC_CHECKS;%s\n[%lu] %s_SERVICEGROUP_HOST_CHECKS;%s\n",current_time,(cmd==CMD_ENABLE_SERVICEGROUP_SVC_CHECKS)?"ENABLE":"DISABLE",servicegroup_name,current_time,(cmd==CMD_ENABLE_SERVICEGROUP_SVC_CHECKS)?"ENABLE":"DISABLE",servicegroup_name);
+		result = cmd_submitf(cmd,"%s",servicegroup_name);
+		if(affect_host_and_services==TRUE) {
+			cmd = (cmd == CMD_ENABLE_SERVICEGROUP_SVC_CHECKS) ? CMD_ENABLE_SERVICEGROUP_HOST_CHECKS : CMD_DISABLE_SERVICEGROUP_HOST_CHECKS;
+			result |= cmd_submitf(cmd,"%s",servicegroup_name);
+		}
 		break;
 
 	case CMD_SCHEDULE_SERVICEGROUP_HOST_DOWNTIME:
-		snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_SERVICEGROUP_HOST_DOWNTIME;%s;%lu;%lu;%d;0;%lu;%s;%s\n",current_time,servicegroup_name,start_time,end_time,(fixed==TRUE)?1:0,duration,comment_author,comment_data);
+		result = cmd_submitf(cmd,"%s;%lu;%lu;%d;0;%lu;%s;%s",servicegroup_name,start_time,end_time,fixed,duration,comment_author,comment_data);
 		break;
 
 	case CMD_SCHEDULE_SERVICEGROUP_SVC_DOWNTIME:
-		if(affect_host_and_services==FALSE)
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_SERVICEGROUP_SVC_DOWNTIME;%s;%lu;%lu;%d;0;%lu;%s;%s\n",current_time,servicegroup_name,start_time,end_time,(fixed==TRUE)?1:0,duration,comment_author,comment_data);
-		else
-			snprintf(command_buffer,sizeof(command_buffer)-1,"[%lu] SCHEDULE_SERVICEGROUP_SVC_DOWNTIME;%s;%lu;%lu;%d;0;%lu;%s;%s\n[%lu] SCHEDULE_SERVICEGROUP_HOST_DOWNTIME;%s;%lu;%lu;%d;%lu;%s;%s\n",current_time,servicegroup_name,start_time,end_time,(fixed==TRUE)?1:0,duration,comment_author,comment_data,current_time,servicegroup_name,start_time,end_time,(fixed==TRUE)?1:0,duration,comment_author,comment_data);
+		result = cmd_submitf(cmd,"%s;%lu;%lu;%d;0;%lu;%s;%s",servicegroup_name,start_time,end_time,fixed,duration,comment_author,comment_data);
+		if(affect_host_and_services==TRUE)
+			result |= cmd_submitf(CMD_SCHEDULE_SERVICEGROUP_HOST_DOWNTIME, "%s;%lu;%lu;%d;0;%lu;%s;%s",servicegroup_name,start_time,end_time,fixed,duration,comment_author,comment_data);
 		break;
 
 	default:
@@ -2220,12 +2218,6 @@
 		break;
 	        }
 
-	/* make sure command buffer is terminated */
-	command_buffer[sizeof(command_buffer)-1]='\x0';
-
-	/* write the command to the command file */
-	result=write_command_to_file(command_buffer);
-
 	return result;
         }
 
@@ -2236,6 +2228,17 @@
 	FILE *fp;
 	struct stat statbuf;
 
+	if (!ifs_has_valid_token(0))
+		return ERROR;
+
+	/*
+	 * Commands are not allowed to have newlines in them, as
+	 * that allows malicious users to hand-craft requests that
+	 * bypass the access-restrictions.
+	 */
+	if (!cmd || !*cmd || strchr(cmd, '\n'))
+		return ERROR;
+
 	/* bail out if the external command file doesn't exist */
 	if(stat(command_file,&statbuf)){
 
@@ -2268,7 +2271,7 @@
 	        }
 
 	/* write the command to file */
-	fputs(cmd,fp);
+	fprintf(fp, "%s\n", cmd);
 
 	/* flush buffer */
 	fflush(fp);
diff -urNad nagios3-3.0.3~/cgi/extcmd_list.c nagios3-3.0.3/cgi/extcmd_list.c
--- nagios3-3.0.3~/cgi/extcmd_list.c	1970-01-01 01:00:00.000000000 +0100
+++ nagios3-3.0.3/cgi/extcmd_list.c	2008-11-28 21:17:31.000000000 +0100
@@ -0,0 +1,227 @@
+#include <stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include "../include/common.h"
+
+struct nagios_extcmd {
+	const char *name;
+	int id;
+/*	size_t namelen;
+	int min_args;
+	int (*handler)(struct nagios_extcmd *, int, char **);
+	struct nagios_extcmd *next_handler;
+ */
+};
+
+#define CMD_DEF(name, min_args, handler) \
+	{ #name, CMD_ ## name }
+/*	{ #name, sizeof(#name) - 1, CMD_ ## name, min_args, handler, NULL } */
+struct nagios_extcmd in_core_commands[] =
+{
+	CMD_DEF(NONE, 0, NULL),
+	CMD_DEF(ADD_HOST_COMMENT, 0, NULL),
+	CMD_DEF(DEL_HOST_COMMENT, 0, NULL),
+	CMD_DEF(ADD_SVC_COMMENT, 0, NULL),
+	CMD_DEF(DEL_SVC_COMMENT, 0, NULL),
+	CMD_DEF(ENABLE_SVC_CHECK, 0, NULL),
+	CMD_DEF(DISABLE_SVC_CHECK, 0, NULL),
+	CMD_DEF(SCHEDULE_SVC_CHECK, 0, NULL),
+	CMD_DEF(DELAY_SVC_NOTIFICATION, 0, NULL),
+	CMD_DEF(DELAY_HOST_NOTIFICATION, 0, NULL),
+	CMD_DEF(DISABLE_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(RESTART_PROCESS, 0, NULL),
+	CMD_DEF(SHUTDOWN_PROCESS, 0, NULL),
+	CMD_DEF(ENABLE_HOST_SVC_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_HOST_SVC_CHECKS, 0, NULL),
+	CMD_DEF(SCHEDULE_HOST_SVC_CHECKS, 0, NULL),
+	CMD_DEF(DELAY_HOST_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DEL_ALL_HOST_COMMENTS, 0, NULL),
+	CMD_DEF(DEL_ALL_SVC_COMMENTS, 0, NULL),
+	CMD_DEF(ENABLE_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_ALL_NOTIFICATIONS_BEYOND_HOST, 0, NULL),
+	CMD_DEF(DISABLE_ALL_NOTIFICATIONS_BEYOND_HOST, 0, NULL),
+	CMD_DEF(ENABLE_HOST_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_HOST_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(PROCESS_SERVICE_CHECK_RESULT, 0, NULL),
+	CMD_DEF(SAVE_STATE_INFORMATION, 0, NULL),
+	CMD_DEF(READ_STATE_INFORMATION, 0, NULL),
+	CMD_DEF(ACKNOWLEDGE_HOST_PROBLEM, 0, NULL),
+	CMD_DEF(ACKNOWLEDGE_SVC_PROBLEM, 0, NULL),
+	CMD_DEF(START_EXECUTING_SVC_CHECKS, 0, NULL),
+	CMD_DEF(STOP_EXECUTING_SVC_CHECKS, 0, NULL),
+	CMD_DEF(START_ACCEPTING_PASSIVE_SVC_CHECKS, 0, NULL),
+	CMD_DEF(STOP_ACCEPTING_PASSIVE_SVC_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_PASSIVE_SVC_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_PASSIVE_SVC_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_EVENT_HANDLERS, 0, NULL),
+	CMD_DEF(DISABLE_EVENT_HANDLERS, 0, NULL),
+	CMD_DEF(ENABLE_HOST_EVENT_HANDLER, 0, NULL),
+	CMD_DEF(DISABLE_HOST_EVENT_HANDLER, 0, NULL),
+	CMD_DEF(ENABLE_SVC_EVENT_HANDLER, 0, NULL),
+	CMD_DEF(DISABLE_SVC_EVENT_HANDLER, 0, NULL),
+	CMD_DEF(ENABLE_HOST_CHECK, 0, NULL),
+	CMD_DEF(DISABLE_HOST_CHECK, 0, NULL),
+	CMD_DEF(START_OBSESSING_OVER_SVC_CHECKS, 0, NULL),
+	CMD_DEF(STOP_OBSESSING_OVER_SVC_CHECKS, 0, NULL),
+	CMD_DEF(REMOVE_HOST_ACKNOWLEDGEMENT, 0, NULL),
+	CMD_DEF(REMOVE_SVC_ACKNOWLEDGEMENT, 0, NULL),
+	CMD_DEF(SCHEDULE_FORCED_HOST_SVC_CHECKS, 0, NULL),
+	CMD_DEF(SCHEDULE_FORCED_SVC_CHECK, 0, NULL),
+	CMD_DEF(SCHEDULE_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(SCHEDULE_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(ENABLE_HOST_FLAP_DETECTION, 0, NULL),
+	CMD_DEF(DISABLE_HOST_FLAP_DETECTION, 0, NULL),
+	CMD_DEF(ENABLE_SVC_FLAP_DETECTION, 0, NULL),
+	CMD_DEF(DISABLE_SVC_FLAP_DETECTION, 0, NULL),
+	CMD_DEF(ENABLE_FLAP_DETECTION, 0, NULL),
+	CMD_DEF(DISABLE_FLAP_DETECTION, 0, NULL),
+	CMD_DEF(ENABLE_HOSTGROUP_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_HOSTGROUP_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_HOSTGROUP_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_HOSTGROUP_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_HOSTGROUP_SVC_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_HOSTGROUP_SVC_CHECKS, 0, NULL),
+	CMD_DEF(CANCEL_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(CANCEL_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(CANCEL_ACTIVE_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(CANCEL_PENDING_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(CANCEL_ACTIVE_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(CANCEL_PENDING_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(CANCEL_ACTIVE_HOST_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(CANCEL_PENDING_HOST_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(FLUSH_PENDING_COMMANDS, 0, NULL),
+	CMD_DEF(DEL_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(DEL_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(ENABLE_FAILURE_PREDICTION, 0, NULL),
+	CMD_DEF(DISABLE_FAILURE_PREDICTION, 0, NULL),
+	CMD_DEF(ENABLE_PERFORMANCE_DATA, 0, NULL),
+	CMD_DEF(DISABLE_PERFORMANCE_DATA, 0, NULL),
+	CMD_DEF(SCHEDULE_HOSTGROUP_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(SCHEDULE_HOSTGROUP_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(SCHEDULE_HOST_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(PROCESS_HOST_CHECK_RESULT, 0, NULL),
+	CMD_DEF(START_EXECUTING_HOST_CHECKS, 0, NULL),
+	CMD_DEF(STOP_EXECUTING_HOST_CHECKS, 0, NULL),
+	CMD_DEF(START_ACCEPTING_PASSIVE_HOST_CHECKS, 0, NULL),
+	CMD_DEF(STOP_ACCEPTING_PASSIVE_HOST_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_PASSIVE_HOST_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_PASSIVE_HOST_CHECKS, 0, NULL),
+	CMD_DEF(START_OBSESSING_OVER_HOST_CHECKS, 0, NULL),
+	CMD_DEF(STOP_OBSESSING_OVER_HOST_CHECKS, 0, NULL),
+	CMD_DEF(SCHEDULE_HOST_CHECK, 0, NULL),
+	CMD_DEF(SCHEDULE_FORCED_HOST_CHECK, 0, NULL),
+	CMD_DEF(START_OBSESSING_OVER_SVC, 0, NULL),
+	CMD_DEF(STOP_OBSESSING_OVER_SVC, 0, NULL),
+	CMD_DEF(START_OBSESSING_OVER_HOST, 0, NULL),
+	CMD_DEF(STOP_OBSESSING_OVER_HOST, 0, NULL),
+	CMD_DEF(ENABLE_HOSTGROUP_HOST_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_HOSTGROUP_HOST_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_HOSTGROUP_PASSIVE_SVC_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_HOSTGROUP_PASSIVE_SVC_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_HOSTGROUP_PASSIVE_HOST_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_HOSTGROUP_PASSIVE_HOST_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_SERVICEGROUP_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_SERVICEGROUP_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_SERVICEGROUP_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_SERVICEGROUP_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_SERVICEGROUP_SVC_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_SERVICEGROUP_SVC_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_SERVICEGROUP_HOST_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_SERVICEGROUP_HOST_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_SERVICEGROUP_PASSIVE_SVC_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_SERVICEGROUP_PASSIVE_SVC_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_SERVICEGROUP_PASSIVE_HOST_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_SERVICEGROUP_PASSIVE_HOST_CHECKS, 0, NULL),
+	CMD_DEF(SCHEDULE_SERVICEGROUP_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(SCHEDULE_SERVICEGROUP_SVC_DOWNTIME, 0, NULL),
+	CMD_DEF(CHANGE_GLOBAL_HOST_EVENT_HANDLER, 0, NULL),
+	CMD_DEF(CHANGE_GLOBAL_SVC_EVENT_HANDLER, 0, NULL),
+	CMD_DEF(CHANGE_HOST_EVENT_HANDLER, 0, NULL),
+	CMD_DEF(CHANGE_SVC_EVENT_HANDLER, 0, NULL),
+	CMD_DEF(CHANGE_HOST_CHECK_COMMAND, 0, NULL),
+	CMD_DEF(CHANGE_SVC_CHECK_COMMAND, 0, NULL),
+	CMD_DEF(CHANGE_NORMAL_HOST_CHECK_INTERVAL, 0, NULL),
+	CMD_DEF(CHANGE_NORMAL_SVC_CHECK_INTERVAL, 0, NULL),
+	CMD_DEF(CHANGE_RETRY_SVC_CHECK_INTERVAL, 0, NULL),
+	CMD_DEF(CHANGE_MAX_HOST_CHECK_ATTEMPTS, 0, NULL),
+	CMD_DEF(CHANGE_MAX_SVC_CHECK_ATTEMPTS, 0, NULL),
+	CMD_DEF(SCHEDULE_AND_PROPAGATE_TRIGGERED_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(ENABLE_HOST_AND_CHILD_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_HOST_AND_CHILD_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(SCHEDULE_AND_PROPAGATE_HOST_DOWNTIME, 0, NULL),
+	CMD_DEF(ENABLE_SERVICE_FRESHNESS_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_SERVICE_FRESHNESS_CHECKS, 0, NULL),
+	CMD_DEF(ENABLE_HOST_FRESHNESS_CHECKS, 0, NULL),
+	CMD_DEF(DISABLE_HOST_FRESHNESS_CHECKS, 0, NULL),
+	CMD_DEF(SET_HOST_NOTIFICATION_NUMBER, 0, NULL),
+	CMD_DEF(SET_SVC_NOTIFICATION_NUMBER, 0, NULL),
+	CMD_DEF(CHANGE_HOST_CHECK_TIMEPERIOD, 0, NULL),
+	CMD_DEF(CHANGE_SVC_CHECK_TIMEPERIOD, 0, NULL),
+	CMD_DEF(PROCESS_FILE, 0, NULL),
+	CMD_DEF(CHANGE_CUSTOM_HOST_VAR, 0, NULL),
+	CMD_DEF(CHANGE_CUSTOM_SVC_VAR, 0, NULL),
+	CMD_DEF(CHANGE_CUSTOM_CONTACT_VAR, 0, NULL),
+	CMD_DEF(ENABLE_CONTACT_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_CONTACT_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_CONTACT_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_CONTACT_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_CONTACTGROUP_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_CONTACTGROUP_HOST_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(ENABLE_CONTACTGROUP_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(DISABLE_CONTACTGROUP_SVC_NOTIFICATIONS, 0, NULL),
+	CMD_DEF(CHANGE_RETRY_HOST_CHECK_INTERVAL, 0, NULL),
+	CMD_DEF(SEND_CUSTOM_HOST_NOTIFICATION, 0, NULL),
+	CMD_DEF(SEND_CUSTOM_SVC_NOTIFICATION, 0, NULL),
+	CMD_DEF(CHANGE_HOST_NOTIFICATION_TIMEPERIOD, 0, NULL),
+	CMD_DEF(CHANGE_SVC_NOTIFICATION_TIMEPERIOD, 0, NULL),
+	CMD_DEF(CHANGE_CONTACT_HOST_NOTIFICATION_TIMEPERIOD, 0, NULL),
+	CMD_DEF(CHANGE_CONTACT_SVC_NOTIFICATION_TIMEPERIOD, 0, NULL),
+	CMD_DEF(CHANGE_HOST_MODATTR, 0, NULL),
+	CMD_DEF(CHANGE_SVC_MODATTR, 0, NULL),
+	CMD_DEF(CHANGE_CONTACT_MODATTR, 0, NULL),
+	CMD_DEF(CHANGE_CONTACT_MODHATTR, 0, NULL),
+	CMD_DEF(CHANGE_CONTACT_MODSATTR, 0, NULL),
+};
+#undef CMD_DEF
+
+#ifndef ARRAY_SIZE
+# define ARRAY_SIZE(x) (sizeof(x) / sizeof(x[0]))
+#endif
+static int extcmd_entries, extcmd_slots;
+
+const char *extcmd_get_name(int id)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(in_core_commands); i++) {
+		struct nagios_extcmd *ecmd;
+		ecmd = &in_core_commands[i];
+		if (ecmd->id == id)
+			return ecmd->name;
+	}
+
+	return NULL;
+}
+
+#ifdef ECMD_LIST_TESTING
+int main(int argc, char **argv)
+{
+	int i, no_handler = 0;
+
+	for (i = 0; i < ARRAY_SIZE(in_core_commands); i++) {
+		struct nagios_extcmd *cmd = &in_core_commands[i];
+		if (!cmd->handler) {
+			no_handler++;
+			printf("%s has no handler\n", extcmd_get_name(i));
+		}
+	}
+	printf("%d of %d commands have no handler\n",
+	       no_handler, ARRAY_SIZE(in_core_commands));
+
+	return 0;
+}
+#endif
diff -urNad nagios3-3.0.3~/cgi/form_session.c nagios3-3.0.3/cgi/form_session.c
--- nagios3-3.0.3~/cgi/form_session.c	1970-01-01 01:00:00.000000000 +0100
+++ nagios3-3.0.3/cgi/form_session.c	2008-11-28 21:17:31.000000000 +0100
@@ -0,0 +1,432 @@
+/*
+ * anti_csrf.c: Simple in-form session handling
+ *
+ * Note that this is a limited implementation specific for
+ * Nagios' needs. It should be adaptable for a more generic
+ * use, but that's not my itch to scratch.
+ *
+ * Copyright(c) Andreas Ericsson <ae@op5.se>
+ * License: GPLv2 or whatever the Nagios code you're compiling
+ *          this with happens to be licensed as.
+ */
+#include <stdlib.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/ipc.h> /* for ftok() */
+#include <fcntl.h>
+#include <dirent.h>
+#include <string.h>
+#include <unistd.h>
+#include <errno.h>
+#include <time.h>
+#include <dirent.h>
+#include "sha1.h"
+#include "form_session.h"
+
+char *ncgi_session_id = NULL;
+
+struct ifs_session {
+	const char *remote_user;
+	const char *remote_addr;
+	char token[41]; /* make space for nul */
+	time_t updated;
+};
+
+char *ifs_token_dir = NULL;
+
+#ifndef PATH_MAX
+# define PATH_MAX 4096
+#endif
+
+#define IFS_MAX_SESSION_DATA_SIZE 100
+#define IFS_SESSION_DURATION (15 * 60) /* a session lasts 15 minutes */
+
+typedef struct ifs_session ifs_session;
+static struct ifs_session session;
+
+static void *xmalloc(size_t size)
+{
+	void *ptr;
+	ptr = malloc(size);
+	memset(ptr, '@', size);
+
+	return ptr;
+}
+
+/*
+ * "in" must be at least 20 bytes long
+ * "out" must be 41 chars long
+ */
+static void sha1_to_str(const unsigned char *in, char *out)
+{
+	int i, x = 0;
+	const char hex_chars[] = "0123456789abcdef";
+
+	for (i = 0; i < 20; i++) {
+		unsigned char hi, lo;
+		hi = in[i] >> 4;
+		lo = in[i] & 0x0f;
+		out[x++] = hex_chars[hi];
+		out[x++] = hex_chars[lo];
+	}
+	out[x] = 0;
+}
+
+static void ifs_srand(void)
+{
+	/* A very weak random seed. This should be replaced */
+	srand((unsigned int)(ftok("/", 17) ^ time(NULL)));
+}
+
+static int ifs_mkdir_recursive(const char *base_path)
+{
+	char *slash, *path;
+	int result;
+
+	result = mkdir(base_path, 0700);
+	if (result < 0 && errno == EEXIST)
+		return 0;
+	if (result < 0 && errno != ENOENT) {
+		return -1;
+	}
+
+	path = strdup(base_path);
+	if (!path)
+		return -1;
+	slash = strchr(path + 1, '/');
+	while (slash) {
+		if (!slash[1])
+			break;
+		*slash = '\0';
+		result = mkdir(path, 0700);
+		if (result < 0) {
+			if (errno != EEXIST && errno != ENOENT) {
+				free(path);
+				return -1;
+			}
+		}
+		*slash = '/';
+		slash = strchr(slash + 1, '/');
+	}
+
+	free(path);
+	return 0;
+}
+
+#define IFS_TOKENDIR_SUFFIX ".ncgi-form-session-tokens"
+static char *ifs_get_token_dir(void)
+{
+	if (!ifs_token_dir) {
+		const char *tmp;
+		char *token_dir;
+		int tmp_len, suffix_len;
+
+		tmp = getenv("TMP");
+		if (!tmp)
+			tmp = getenv("TMPDIR");
+		if (!tmp)
+			tmp = "/tmp";
+
+		tmp_len = strlen(tmp);
+		suffix_len = sizeof(IFS_TOKENDIR_SUFFIX);
+		token_dir = xmalloc(tmp_len + suffix_len + 2);
+		memcpy(token_dir, tmp, tmp_len);
+		token_dir[tmp_len] = '/';
+		memcpy(token_dir + tmp_len + 1, IFS_TOKENDIR_SUFFIX, suffix_len);
+
+		ifs_token_dir = strdup(token_dir);
+	}
+
+	if (ifs_mkdir_recursive(ifs_token_dir) < 0)
+		return NULL;
+
+	return ifs_token_dir;
+}
+
+static char *ifs_get_path(const char *id)
+{
+	int id_len, token_dir_len, path_len;
+	char *path, *token_dir;
+
+	token_dir = ifs_get_token_dir();
+	if (!id || !token_dir)
+		return NULL;
+
+	id_len = strlen(id);
+	if (id_len != 40)
+		return NULL;
+
+	token_dir_len = strlen(token_dir);
+	path_len = id_len + token_dir_len + 2;
+	path = calloc(path_len, 1);
+	if (!path)
+		return NULL;
+
+	memcpy(path, token_dir, token_dir_len);
+	path[token_dir_len] = '/';
+	memcpy(&path[token_dir_len + 1], id, id_len);
+
+	return path;
+}
+
+static void ifs_purge(void)
+{
+	char cwd[PATH_MAX], *token_dir;
+	DIR *dirp;
+	struct dirent *de;
+
+	token_dir = ifs_get_token_dir();
+	if (!token_dir)
+		return;
+
+	dirp = opendir(token_dir);
+	if (!dirp)
+		return;
+
+	getcwd(cwd, sizeof(cwd));
+	if (chdir(token_dir))
+		return;
+
+	while ((de = readdir(dirp))) {
+		struct stat st;
+
+		if (strlen(de->d_name) != sizeof(session.token) - 1 ||
+		    stat(de->d_name, &st) < 0 ||
+		    st.st_size > IFS_MAX_SESSION_DATA_SIZE ||
+		    !st.st_size ||
+		    st.st_mtime < time(NULL) - IFS_SESSION_DURATION)
+		{
+			unlink(de->d_name);
+			continue;
+		}
+	}
+
+	chdir(cwd);
+}
+
+static void ifs_print_session(ifs_session *sess)
+{
+	printf("remote_user: %s\n", sess->remote_user);
+	printf("remote_addr: %s\n", sess->remote_addr);
+	printf("token      : %s\n", sess->token);
+	printf("updated    : %lu\n", sess->updated);
+}
+
+static int ifs_save_session(void)
+{
+	char *path;
+	FILE *fp;
+	mode_t old_umask;
+
+	ifs_purge();
+	if (!session.updated || !session.remote_user || !session.remote_addr ||
+	    strlen(session.token) != sizeof(session.token) - 1)
+	{
+		return -1;
+	}
+
+	path = ifs_get_path(session.token);
+	if (!path)
+		return -1;
+
+	old_umask = umask(0077);
+	fp = fopen(path, "w");
+	umask(old_umask);
+	free(path);
+	if (!fp) {
+		return -1;
+	}
+
+	fprintf(fp, "%s\n%s\n%s\n", session.remote_user, session.remote_addr,
+	        session.token);
+	fclose(fp);
+
+	return 0;
+}
+
+
+/*
+ * Create the token from remote_user, remote_addr, the unix timestamp
+ * and a random number. Since we're using a cryptographically secure
+ * hash to create the token, a single random number suffices
+ */
+static const char *ifs_create_token(void)
+{
+	ncgi_SHA_CTX ctx;
+	unsigned char rawhash[20];
+	int i;
+
+	session.remote_user = getenv("REMOTE_USER");
+	if (!session.remote_user)
+		return NULL;
+
+	session.remote_addr = getenv("REMOTE_ADDR");
+	if (!session.remote_addr)
+		return NULL;
+
+	session.updated = time(NULL);
+
+	ncgi_SHA1_Init(&ctx);
+	ncgi_SHA1_Update(&ctx, session.remote_user, strlen(session.remote_user));
+	ncgi_SHA1_Update(&ctx, session.remote_addr, strlen(session.remote_addr));
+	ncgi_SHA1_Update(&ctx, &session.updated, sizeof(session.updated));
+
+	/* add some random numbers to the mix */
+	ifs_srand();
+	for (i = 0; i < 10; i++) {
+		int r;
+
+		r = rand();
+		ncgi_SHA1_Update(&ctx, &r, sizeof(r));
+	}
+
+	ncgi_SHA1_Final(rawhash, &ctx);
+	sha1_to_str(rawhash, session.token);
+
+	if (!ifs_save_session())
+		return session.token;
+
+	return NULL;
+}
+
+static int ifs_parse_session(const char *path, ifs_session *sess)
+{
+	int fd, rd;
+	char buf[IFS_MAX_SESSION_DATA_SIZE], *p1, *p2;
+	struct stat st;
+
+	if (!path || !sess)
+		return -1;
+
+	memset(sess, 0, sizeof(ifs_session));
+
+	if (stat(path, &st) < 0) {
+		return -1;
+	}
+
+	if (st.st_size > IFS_MAX_SESSION_DATA_SIZE) {
+		return -1;
+	}
+
+	fd = open(path, O_RDONLY);
+	if (fd < 0) {
+		return -1;
+	}
+
+	rd = read(fd, buf, st.st_size);
+	close(fd);
+
+	if (rd != st.st_size) {
+		return -1;
+	}
+
+	/* dump trailing newlines */
+	while (buf[--rd] == '\n')
+		;
+	buf[rd + 1] = '\0';
+
+	/* clumsy, but quick to hack up */
+	p1 = strchr(buf, '\n');
+	if (!p1)
+		return -1;
+	*(p1++) = '\0';
+	p2 = strchr(p1, '\n');
+	if (!p2)
+		return -1;
+	*(p2++) = '\0';
+	if (strlen(p2) != sizeof(sess->token) - 1)
+		return -1;
+
+	sess->remote_user = strdup(buf);
+	sess->remote_addr = strdup(p1);
+	memcpy(sess->token, p2, sizeof(sess->token) - 1);
+	sess->token[sizeof(sess->token) - 1] = '\0';
+	sess->updated = st.st_mtime;
+
+	return 0;
+}
+
+static int ifs_load_session(const char *id)
+{
+	char *path;
+	int result;
+	ifs_session sess;
+
+	ifs_purge();
+
+	memset(&session, 0, sizeof(session));
+
+	path = ifs_get_path(id);
+	result = ifs_parse_session(path, &sess);
+	free(path);
+	if (result < 0)
+		return -1;
+
+	if (memcmp(id, sess.token, sizeof(session.token) - 1))
+		return -1;
+
+	memcpy(&session, &sess, sizeof(session));
+
+	return 0;
+}
+
+int ifs_has_valid_token(int strict)
+{
+	if (session.updated)
+		return 1;
+
+	if (!ncgi_session_id || ifs_load_session(ncgi_session_id) < 0)
+		return 0;
+
+	if (strcmp(session.remote_user, getenv("REMOTE_USER")))
+		return 0;
+
+	if (strict && strcmp(session.remote_addr, getenv("REMOTE_ADDR")))
+		return 0;
+
+	return 1;
+}
+
+/*
+ * If the use already has a token, use that. Otherwise
+ * create one and return that
+ */
+const char *ifs_get_token(void)
+{
+	const char *token;
+
+	if (ifs_has_valid_token(0))
+		return session.token;
+
+	token = ifs_create_token();
+	if (token)
+		token = strdup(token);
+
+	return token;
+}
+
+#ifdef ANTI_CSRF_TESTING
+int main(int argc, char **argv)
+{
+	const char *token;
+	const char *static_token = "8fe1c9681f41f0fe9fd476421d908ce03e950bd4";
+
+	token = ifs_get_token();
+	printf("Created token: %s\n", token);
+
+	printf("\n----\nLoading key: %s\n", token);
+	ifs_load_session(token);
+	ifs_print_session(&session);
+
+	printf("\n----\nLoading key: %s\n", static_token);
+	ifs_load_session(static_token);
+	ifs_print_session(&session);
+
+	printf("\n----\nLoading key: %s\n", token);
+	ifs_load_session(token);
+	ifs_print_session(&session);
+
+	return 0;
+}
+#endif
diff -urNad nagios3-3.0.3~/cgi/form_session.h nagios3-3.0.3/cgi/form_session.h
--- nagios3-3.0.3~/cgi/form_session.h	1970-01-01 01:00:00.000000000 +0100
+++ nagios3-3.0.3/cgi/form_session.h	2008-11-28 21:17:31.000000000 +0100
@@ -0,0 +1,5 @@
+/* the public api is ridiculously simple */
+extern char *ncgi_session_id;
+extern char *ifs_token_dir;
+extern const char *ifs_get_token(void);
+extern int ifs_has_valid_token(int strict);
diff -urNad nagios3-3.0.3~/cgi/histogram.c nagios3-3.0.3/cgi/histogram.c
--- nagios3-3.0.3~/cgi/histogram.c	2008-05-19 20:42:26.000000000 +0200
+++ nagios3-3.0.3/cgi/histogram.c	2008-11-28 21:17:31.000000000 +0100
@@ -3,7 +3,7 @@
  * HISTOGRAM.C -  Nagios Alert Histogram CGI
  *
  * Copyright (c) 2001-2008 Ethan Galstad (nagios@nagios.org)
- * Last Modified: 01-08-2008
+ * Last Modified: 10-15-2008
  *
  * License:
  * 
@@ -407,9 +407,9 @@
 			printf("<form method=\"GET\" action=\"%s\">\n",HISTOGRAM_CGI);
 			printf("<input type='hidden' name='t1' value='%lu'>\n",(unsigned long)t1);
 			printf("<input type='hidden' name='t2' value='%lu'>\n",(unsigned long)t2);
-			printf("<input type='hidden' name='host' value='%s'>\n",url_encode(host_name));
+			printf("<input type='hidden' name='host' value='%s'>\n",escape_string(host_name));
 			if(display_type==DISPLAY_SERVICE_HISTOGRAM)
-				printf("<input type='hidden' name='service' value='%s'>\n",url_encode(svc_description));
+				printf("<input type='hidden' name='service' value='%s'>\n",escape_string(svc_description));
 
 
 			printf("<tr><td CLASS='optBoxItem' valign=top align=left>Report period:</td><td CLASS='optBoxItem' valign=top align=left>Assume state retention:</td></tr>\n");
@@ -697,7 +697,7 @@
 
 			for(temp_host=host_list;temp_host!=NULL;temp_host=temp_host->next){
 				if(is_authorized_for_host(temp_host,&current_authdata)==TRUE)
-					printf("<option value='%s'>%s\n",temp_host->name,temp_host->name);
+					printf("<option value='%s'>%s\n",escape_string(temp_host->name),temp_host->name);
 			        }
 
 			printf("</select>\n");
@@ -746,7 +746,7 @@
 			printf("<TABLE BORDER=0 cellpadding=5>\n");
 			printf("<form method=\"GET\" action=\"%s\" name=\"serviceform\">\n",HISTOGRAM_CGI);
 			printf("<input type='hidden' name='input' value='getoptions'>\n");
-			printf("<input type='hidden' name='host' value='%s'>\n",(first_service==NULL)?"unknown":first_service);
+			printf("<input type='hidden' name='host' value='%s'>\n",(first_service==NULL)?"unknown":(char *)escape_string(first_service));
 
 			printf("<tr><td class='reportSelectSubTitle'>Service:</td>\n");
 			printf("<td class='reportSelectItem'>\n");
@@ -754,7 +754,7 @@
 
 			for(temp_service=service_list;temp_service!=NULL;temp_service=temp_service->next){
 				if(is_authorized_for_service(temp_service,&current_authdata)==TRUE)
-					printf("<option value='%s'>%s;%s\n",temp_service->description,temp_service->host_name,temp_service->description);
+					printf("<option value='%s'>%s;%s\n",escape_string(temp_service->description),temp_service->host_name,temp_service->description);
 		                }
 
 			printf("</select>\n");
@@ -789,9 +789,9 @@
 
 			printf("<TABLE BORDER=0 cellpadding=5>\n");
 			printf("<form method=\"GET\" action=\"%s\">\n",HISTOGRAM_CGI);
-			printf("<input type='hidden' name='host' value='%s'>\n",url_encode(host_name));
+			printf("<input type='hidden' name='host' value='%s'>\n",escape_string(host_name));
 			if(display_type==DISPLAY_SERVICE_HISTOGRAM)
-				printf("<input type='hidden' name='service' value='%s'>\n",url_encode(svc_description));
+				printf("<input type='hidden' name='service' value='%s'>\n",escape_string(svc_description));
 
 			printf("<tr><td class='reportSelectSubTitle' align=right>Report Period:</td>\n");
 			printf("<td class='reportSelectItem'>\n");
diff -urNad nagios3-3.0.3~/cgi/history.c nagios3-3.0.3/cgi/history.c
--- nagios3-3.0.3~/cgi/history.c	2008-06-23 22:47:44.000000000 +0200
+++ nagios3-3.0.3/cgi/history.c	2008-11-28 21:17:31.000000000 +0100
@@ -204,9 +204,9 @@
 
 		printf("<table border=0 CLASS='optBox'>\n");
 		printf("<form method=\"GET\" action=\"%s\">\n",HISTORY_CGI);
-		printf("<input type='hidden' name='host' value='%s'>\n",(show_all_hosts==TRUE)?"all":url_encode(host_name));
+		printf("<input type='hidden' name='host' value='%s'>\n",(show_all_hosts==TRUE)?"all":escape_string(host_name));
 		if(display_type==DISPLAY_SERVICES)
-			printf("<input type='hidden' name='service' value='%s'>\n",url_encode(svc_description));
+			printf("<input type='hidden' name='service' value='%s'>\n",escape_string(svc_description));
 		printf("<input type='hidden' name='archive' value='%d'>\n",log_archive);
 
 		printf("<tr>\n");
diff -urNad nagios3-3.0.3~/cgi/notifications.c nagios3-3.0.3/cgi/notifications.c
--- nagios3-3.0.3~/cgi/notifications.c	2008-05-19 20:42:27.000000000 +0200
+++ nagios3-3.0.3/cgi/notifications.c	2008-11-28 21:17:31.000000000 +0100
@@ -212,11 +212,11 @@
 		printf("<table border=0 CLASS='optBox'>\n");
 		printf("<form method='GET' action='%s'>\n",NOTIFICATIONS_CGI);
 		if(query_type==FIND_SERVICE){
-			printf("<input type='hidden' name='host' value='%s'>\n",url_encode(query_host_name));
-			printf("<input type='hidden' name='service' value='%s'>\n",url_encode(query_svc_description));
+			printf("<input type='hidden' name='host' value='%s'>\n",escape_string(query_host_name));
+			printf("<input type='hidden' name='service' value='%s'>\n",escape_string(query_svc_description));
 	                }
 		else
-			printf("<input type='hidden' name='%s' value='%s'>\n",(query_type==FIND_HOST)?"host":"contact",url_encode((query_type==FIND_HOST)?query_host_name:query_contact_name));
+			printf("<input type='hidden' name='%s' value='%s'>\n",(query_type==FIND_HOST)?"host":"contact",(query_type==FIND_HOST)?escape_string(query_host_name):escape_string(query_contact_name));
 		printf("<input type='hidden' name='archive' value='%d'>\n",log_archive);
 		printf("<tr>\n");
 		if(query_type==FIND_SERVICE)
diff -urNad nagios3-3.0.3~/cgi/sha1.c nagios3-3.0.3/cgi/sha1.c
--- nagios3-3.0.3~/cgi/sha1.c	1970-01-01 01:00:00.000000000 +0100
+++ nagios3-3.0.3/cgi/sha1.c	2008-11-28 21:17:31.000000000 +0100
@@ -0,0 +1,151 @@
+/*
+ * The contents of this file are subject to the Mozilla Public
+ * License Version 1.1 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of
+ * the License at http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS
+ * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
+ * implied. See the License for the specific language governing
+ * rights and limitations under the License.
+ *
+ * The Original Code is SHA 180-1 Reference Implementation (Compact version)
+ *
+ * The Initial Developer of the Original Code is Paul Kocher of
+ * Cryptography Research.  Portions created by Paul Kocher are
+ * Copyright (C) 1995-9 by Cryptography Research, Inc.  All
+ * Rights Reserved.
+ *
+ * Contributor(s):
+ *
+ *     Paul Kocher
+ *
+ * Alternatively, the contents of this file may be used under the
+ * terms of the GNU General Public License Version 2 or later (the
+ * "GPL"), in which case the provisions of the GPL are applicable
+ * instead of those above.  If you wish to allow use of your
+ * version of this file only under the terms of the GPL and not to
+ * allow others to use your version of this file under the MPL,
+ * indicate your decision by deleting the provisions above and
+ * replace them with the notice and other provisions required by
+ * the GPL.  If you do not delete the provisions above, a recipient
+ * may use your version of this file under either the MPL or the
+ * GPL.
+ */
+
+#include "sha1.h"
+
+static void shaHashBlock(moz_SHA_CTX *ctx);
+
+void moz_SHA1_Init(moz_SHA_CTX *ctx) {
+  int i;
+
+  ctx->lenW = 0;
+  ctx->sizeHi = ctx->sizeLo = 0;
+
+  /* Initialize H with the magic constants (see FIPS180 for constants)
+   */
+  ctx->H[0] = 0x67452301;
+  ctx->H[1] = 0xefcdab89;
+  ctx->H[2] = 0x98badcfe;
+  ctx->H[3] = 0x10325476;
+  ctx->H[4] = 0xc3d2e1f0;
+
+  for (i = 0; i < 80; i++)
+    ctx->W[i] = 0;
+}
+
+
+void moz_SHA1_Update(moz_SHA_CTX *ctx, const void *_dataIn, int len) {
+  const unsigned char *dataIn = _dataIn;
+  int i;
+
+  /* Read the data into W and process blocks as they get full
+   */
+  for (i = 0; i < len; i++) {
+    ctx->W[ctx->lenW / 4] <<= 8;
+    ctx->W[ctx->lenW / 4] |= (unsigned int)dataIn[i];
+    if ((++ctx->lenW) % 64 == 0) {
+      shaHashBlock(ctx);
+      ctx->lenW = 0;
+    }
+    ctx->sizeLo += 8;
+    ctx->sizeHi += (ctx->sizeLo < 8);
+  }
+}
+
+
+void moz_SHA1_Final(unsigned char hashout[20], moz_SHA_CTX *ctx) {
+  unsigned char pad0x80 = 0x80;
+  unsigned char pad0x00 = 0x00;
+  unsigned char padlen[8];
+  int i;
+
+  /* Pad with a binary 1 (e.g. 0x80), then zeroes, then length
+   */
+  padlen[0] = (unsigned char)((ctx->sizeHi >> 24) & 255);
+  padlen[1] = (unsigned char)((ctx->sizeHi >> 16) & 255);
+  padlen[2] = (unsigned char)((ctx->sizeHi >> 8) & 255);
+  padlen[3] = (unsigned char)((ctx->sizeHi >> 0) & 255);
+  padlen[4] = (unsigned char)((ctx->sizeLo >> 24) & 255);
+  padlen[5] = (unsigned char)((ctx->sizeLo >> 16) & 255);
+  padlen[6] = (unsigned char)((ctx->sizeLo >> 8) & 255);
+  padlen[7] = (unsigned char)((ctx->sizeLo >> 0) & 255);
+  moz_SHA1_Update(ctx, &pad0x80, 1);
+  while (ctx->lenW != 56)
+    moz_SHA1_Update(ctx, &pad0x00, 1);
+  moz_SHA1_Update(ctx, padlen, 8);
+
+  /* Output hash
+   */
+  for (i = 0; i < 20; i++) {
+    hashout[i] = (unsigned char)(ctx->H[i / 4] >> 24);
+    ctx->H[i / 4] <<= 8;
+  }
+
+  /*
+   *  Re-initialize the context (also zeroizes contents)
+   */
+  moz_SHA1_Init(ctx);
+}
+
+
+#define SHA_ROT(X,n) (((X) << (n)) | ((X) >> (32-(n))))
+
+static void shaHashBlock(moz_SHA_CTX *ctx) {
+  int t;
+  unsigned int A,B,C,D,E,TEMP;
+
+  for (t = 16; t <= 79; t++)
+    ctx->W[t] =
+      SHA_ROT(ctx->W[t-3] ^ ctx->W[t-8] ^ ctx->W[t-14] ^ ctx->W[t-16], 1);
+
+  A = ctx->H[0];
+  B = ctx->H[1];
+  C = ctx->H[2];
+  D = ctx->H[3];
+  E = ctx->H[4];
+
+  for (t = 0; t <= 19; t++) {
+    TEMP = SHA_ROT(A,5) + (((C^D)&B)^D)     + E + ctx->W[t] + 0x5a827999;
+    E = D; D = C; C = SHA_ROT(B, 30); B = A; A = TEMP;
+  }
+  for (t = 20; t <= 39; t++) {
+    TEMP = SHA_ROT(A,5) + (B^C^D)           + E + ctx->W[t] + 0x6ed9eba1;
+    E = D; D = C; C = SHA_ROT(B, 30); B = A; A = TEMP;
+  }
+  for (t = 40; t <= 59; t++) {
+    TEMP = SHA_ROT(A,5) + ((B&C)|(D&(B|C))) + E + ctx->W[t] + 0x8f1bbcdc;
+    E = D; D = C; C = SHA_ROT(B, 30); B = A; A = TEMP;
+  }
+  for (t = 60; t <= 79; t++) {
+    TEMP = SHA_ROT(A,5) + (B^C^D)           + E + ctx->W[t] + 0xca62c1d6;
+    E = D; D = C; C = SHA_ROT(B, 30); B = A; A = TEMP;
+  }
+
+  ctx->H[0] += A;
+  ctx->H[1] += B;
+  ctx->H[2] += C;
+  ctx->H[3] += D;
+  ctx->H[4] += E;
+}
diff -urNad nagios3-3.0.3~/cgi/sha1.h nagios3-3.0.3/cgi/sha1.h
--- nagios3-3.0.3~/cgi/sha1.h	1970-01-01 01:00:00.000000000 +0100
+++ nagios3-3.0.3/cgi/sha1.h	2008-11-28 21:17:31.000000000 +0100
@@ -0,0 +1,50 @@
+/*
+ * The contents of this file are subject to the Mozilla Public
+ * License Version 1.1 (the "License"); you may not use this file
+ * except in compliance with the License. You may obtain a copy of
+ * the License at http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS
+ * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
+ * implied. See the License for the specific language governing
+ * rights and limitations under the License.
+ *
+ * The Original Code is SHA 180-1 Header File
+ *
+ * The Initial Developer of the Original Code is Paul Kocher of
+ * Cryptography Research.  Portions created by Paul Kocher are
+ * Copyright (C) 1995-9 by Cryptography Research, Inc.  All
+ * Rights Reserved.
+ *
+ * Contributor(s):
+ *
+ *     Paul Kocher
+ *
+ * Alternatively, the contents of this file may be used under the
+ * terms of the GNU General Public License Version 2 or later (the
+ * "GPL"), in which case the provisions of the GPL are applicable
+ * instead of those above.  If you wish to allow use of your
+ * version of this file only under the terms of the GPL and not to
+ * allow others to use your version of this file under the MPL,
+ * indicate your decision by deleting the provisions above and
+ * replace them with the notice and other provisions required by
+ * the GPL.  If you do not delete the provisions above, a recipient
+ * may use your version of this file under either the MPL or the
+ * GPL.
+ */
+
+typedef struct {
+  unsigned int H[5];
+  unsigned int W[80];
+  int lenW;
+  unsigned int sizeHi,sizeLo;
+} moz_SHA_CTX;
+
+void moz_SHA1_Init(moz_SHA_CTX *ctx);
+void moz_SHA1_Update(moz_SHA_CTX *ctx, const void *dataIn, int len);
+void moz_SHA1_Final(unsigned char hashout[20], moz_SHA_CTX *ctx);
+
+#define ncgi_SHA_CTX	moz_SHA_CTX
+#define ncgi_SHA1_Init	moz_SHA1_Init
+#define ncgi_SHA1_Update	moz_SHA1_Update
+#define ncgi_SHA1_Final	moz_SHA1_Final
diff -urNad nagios3-3.0.3~/cgi/statusmap.c nagios3-3.0.3/cgi/statusmap.c
--- nagios3-3.0.3~/cgi/statusmap.c	2008-05-19 20:42:28.000000000 +0200
+++ nagios3-3.0.3/cgi/statusmap.c	2008-11-28 21:17:31.000000000 +0100
@@ -700,7 +700,7 @@
 		printf("<form method=\"POST\" action=\"%s\">\n",STATUSMAP_CGI);
 		printf("<table border=0 CLASS='optBox'>\n");
 		printf("<tr><td valign=top>\n");
-		printf("<input type='hidden' name='host' value='%s'>\n",url_encode(host_name));
+		printf("<input type='hidden' name='host' value='%s'>\n",escape_string(host_name));
 		printf("<input type='hidden' name='layout' value='%d'>\n",layout_method);
 
 		printf("</td><td valign=top>\n");
@@ -763,7 +763,7 @@
 					break;
 				        }
 			        }
-			printf("<option value='%s' %s>%s\n",temp_hostgroup->group_name,(found==1)?"SELECTED":"",temp_hostgroup->alias);
+			printf("<option value='%s' %s>%s\n",escape_string(temp_hostgroup->group_name),(found==1)?"SELECTED":"",temp_hostgroup->alias);
 		        }
 		printf("</select>\n");
 		printf("</td><td CLASS='optBoxItem' valign=top>Layer mode:<br>");
@@ -1944,8 +1944,8 @@
 	printf("\\\" border=0 width=40 height=40></td>");
 	printf("<td class=\\\"popupText\\\"><i>%s</i></td></tr>",(hst->icon_image_alt==NULL)?"":html_encode(hst->icon_image_alt,TRUE));
 
-	printf("<tr><td class=\\\"popupText\\\">Name:</td><td class=\\\"popupText\\\"><b>%s</b></td></tr>",html_encode(hst->name,TRUE));
-	printf("<tr><td class=\\\"popupText\\\">Alias:</td><td class=\\\"popupText\\\"><b>%s</b></td></tr>",html_encode(hst->alias,TRUE));
+	printf("<tr><td class=\\\"popupText\\\">Name:</td><td class=\\\"popupText\\\"><b>%s</b></td></tr>",escape_string(hst->name));
+	printf("<tr><td class=\\\"popupText\\\">Alias:</td><td class=\\\"popupText\\\"><b>%s</b></td></tr>",escape_string(hst->alias));
 	printf("<tr><td class=\\\"popupText\\\">Address:</td><td class=\\\"popupText\\\"><b>%s</b></td></tr>",html_encode(hst->address,TRUE));
 	printf("<tr><td class=\\\"popupText\\\">State:</td><td class=\\\"popupText\\\"><b>");
 
@@ -2390,7 +2390,7 @@
 		if(get_method==TRUE)
 			printf("&layer=%s",temp_layer->layer_name);
 		else
-			printf("<input type='hidden' name='layer' value='%s'>\n",temp_layer->layer_name);
+			printf("<input type='hidden' name='layer' value='%s'>\n",escape_string(temp_layer->layer_name));
 	        }
 
 	if(get_method==TRUE)
diff -urNad nagios3-3.0.3~/cgi/statuswml.c nagios3-3.0.3/cgi/statuswml.c
--- nagios3-3.0.3~/cgi/statuswml.c	2008-05-19 20:42:28.000000000 +0200
+++ nagios3-3.0.3/cgi/statuswml.c	2008-11-28 21:17:31.000000000 +0100
@@ -2,8 +2,8 @@
  *
  * STATUSWML.C -  Nagios Status CGI for WAP-enabled devices
  *
- * Copyright (c) 2001-2007 Ethan Galstad (nagios@nagios.org)
- * Last Modified: 12-13-2007
+ * Copyright (c) 2001-2008 Ethan Galstad (nagios@nagios.org)
+ * Last Modified: 10-15-2008
  *
  * License:
  * 
@@ -606,7 +606,7 @@
 	printf("<card id='card1' title='Status Overview'>\n");
 	printf("<p align='center' mode='nowrap'>\n");
 
-	printf("<b><anchor title='Status Overview'>Status Overview<go href='%s' method='post'><postfield name='hostgroup' value='%s'/><postfield name='style' value='summary'/></go></anchor></b><br/><br/>\n",STATUSWML_CGI,url_encode(hostgroup_name));
+	printf("<b><anchor title='Status Overview'>Status Overview<go href='%s' method='post'><postfield name='hostgroup' value='%s'/><postfield name='style' value='summary'/></go></anchor></b><br/><br/>\n",STATUSWML_CGI,escape_string(hostgroup_name));
 
 	/* check all hostgroups */
 	for(temp_hostgroup=hostgroup_list;temp_hostgroup!=NULL;temp_hostgroup=temp_hostgroup->next){
@@ -689,7 +689,7 @@
 	printf("<card id='card1' title='Status Summary'>\n");
 	printf("<p align='center' mode='nowrap'>\n");
 
-	printf("<b><anchor title='Status Summary'>Status Summary<go href='%s' method='post'><postfield name='hostgroup' value='%s'/><postfield name='style' value='overview'/></go></anchor></b><br/><br/>\n",STATUSWML_CGI,url_encode(hostgroup_name));
+	printf("<b><anchor title='Status Summary'>Status Summary<go href='%s' method='post'><postfield name='hostgroup' value='%s'/><postfield name='style' value='overview'/></go></anchor></b><br/><br/>\n",STATUSWML_CGI,escape_string(hostgroup_name));
 
 	/* check all hostgroups */
 	for(temp_hostgroup=hostgroup_list;temp_hostgroup!=NULL;temp_hostgroup=temp_hostgroup->next){
@@ -911,7 +911,7 @@
 
 	printf("</table>\n");
 	printf("<br/>\n");
-	printf("<b><anchor title='View Services'>View Services<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='style' value='servicedetail'/></go></anchor></b>\n",STATUSWML_CGI,url_encode(host_name));
+	printf("<b><anchor title='View Services'>View Services<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='style' value='servicedetail'/></go></anchor></b>\n",STATUSWML_CGI,escape_string(host_name));
 	printf("<b><anchor title='Host Commands'>Host Commands<go href='#card2'/></anchor></b>\n");
 	printf("</p>\n");
 
@@ -930,23 +930,23 @@
 		printf("<b><anchor title='Acknowledge Problem'>Acknowledge Problem<go href='#card3'/></anchor></b>\n");
 
 	if(temp_hoststatus->checks_enabled==FALSE)
-		printf("<b><anchor title='Enable Host Checks'>Enable Host Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),CMD_ENABLE_HOST_CHECK,CMDMODE_COMMIT);
+		printf("<b><anchor title='Enable Host Checks'>Enable Host Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,escape_string(host_name),CMD_ENABLE_HOST_CHECK,CMDMODE_COMMIT);
 	else
-		printf("<b><anchor title='Disable Host Checks'>Disable Host Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),CMD_DISABLE_HOST_CHECK,CMDMODE_COMMIT);
+		printf("<b><anchor title='Disable Host Checks'>Disable Host Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,escape_string(host_name),CMD_DISABLE_HOST_CHECK,CMDMODE_COMMIT);
 
 	if(temp_hoststatus->notifications_enabled==FALSE)
-		printf("<b><anchor title='Enable Host Notifications'>Enable Host Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),CMD_ENABLE_HOST_NOTIFICATIONS,CMDMODE_COMMIT);
+		printf("<b><anchor title='Enable Host Notifications'>Enable Host Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,escape_string(host_name),CMD_ENABLE_HOST_NOTIFICATIONS,CMDMODE_COMMIT);
 	else
-		printf("<b><anchor title='Disable Host Notifications'>Disable Host Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),CMD_DISABLE_HOST_NOTIFICATIONS,CMDMODE_COMMIT);
+		printf("<b><anchor title='Disable Host Notifications'>Disable Host Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,escape_string(host_name),CMD_DISABLE_HOST_NOTIFICATIONS,CMDMODE_COMMIT);
 
 
-	printf("<b><anchor title='Enable All Service Checks'>Enable All Service Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),CMD_ENABLE_HOST_SVC_CHECKS,CMDMODE_COMMIT);
+	printf("<b><anchor title='Enable All Service Checks'>Enable All Service Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,escape_string(host_name),CMD_ENABLE_HOST_SVC_CHECKS,CMDMODE_COMMIT);
 
-	printf("<b><anchor title='Disable All Service Checks'>Disable All Service Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),CMD_DISABLE_HOST_SVC_CHECKS,CMDMODE_COMMIT);
+	printf("<b><anchor title='Disable All Service Checks'>Disable All Service Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,escape_string(host_name),CMD_DISABLE_HOST_SVC_CHECKS,CMDMODE_COMMIT);
 
-	printf("<b><anchor title='Enable All Service Notifications'>Enable All Service Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),CMD_ENABLE_HOST_SVC_NOTIFICATIONS,CMDMODE_COMMIT);
+	printf("<b><anchor title='Enable All Service Notifications'>Enable All Service Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,escape_string(host_name),CMD_ENABLE_HOST_SVC_NOTIFICATIONS,CMDMODE_COMMIT);
 
-	printf("<b><anchor title='Disable All Service Notifications'>Disable All Service Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),CMD_DISABLE_HOST_SVC_NOTIFICATIONS,CMDMODE_COMMIT);
+	printf("<b><anchor title='Disable All Service Notifications'>Disable All Service Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,escape_string(host_name),CMD_DISABLE_HOST_SVC_NOTIFICATIONS,CMDMODE_COMMIT);
 
 	printf("</p>\n");
 
@@ -966,7 +966,7 @@
 	printf("<input name='comment' value='acknowledged by WAP'/>\n");
 
 	printf("<do type='accept'>\n");
-	printf("<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='com_author' value='$(name)'/><postfield name='com_data' value='$(comment)'/><postfield name='persistent' value=''/><postfield name='send_notification' value=''/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go>\n",COMMAND_CGI,url_encode(host_name),CMD_ACKNOWLEDGE_HOST_PROBLEM,CMDMODE_COMMIT);
+	printf("<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='com_author' value='$(name)'/><postfield name='com_data' value='$(comment)'/><postfield name='persistent' value=''/><postfield name='send_notification' value=''/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go>\n",COMMAND_CGI,escape_string(host_name),CMD_ACKNOWLEDGE_HOST_PROBLEM,CMDMODE_COMMIT);
 	printf("</do>\n");
 
 	printf("</p>\n");
@@ -986,7 +986,8 @@
 	/**** MAIN SCREEN (CARD 1) ****/
 	printf("<card id='card1' title='Host Services'>\n");
 	printf("<p align='center' mode='nowrap'>\n");
-	printf("<b>Host <anchor title='%s'>'%s'<go href='%s' method='post'><postfield name='host' value='%s'/></go></anchor> Services</b><br/>\n",url_encode(host_name),host_name,STATUSWML_CGI,url_encode(host_name));
+	printf("<b>Host <anchor title='%s'>",url_encode(host_name));
+	printf("'%s'<go href='%s' method='post'><postfield name='host' value='%s'/></go></anchor> Services</b><br/>\n",host_name,STATUSWML_CGI,escape_string(host_name));
 
 	printf("<table columns='2' align='LL'>\n");
 
@@ -1127,7 +1128,7 @@
 
 	printf("</table>\n");
 	printf("<br/>\n");
-	printf("<b><anchor title='View Host'>View Host<go href='%s' method='post'><postfield name='host' value='%s'/></go></anchor></b>\n",STATUSWML_CGI,url_encode(host_name));
+	printf("<b><anchor title='View Host'>View Host<go href='%s' method='post'><postfield name='host' value='%s'/></go></anchor></b>\n",STATUSWML_CGI,escape_string(host_name));
 	printf("<b><anchor title='Service Commands'>Svc. Commands<go href='#card2'/></anchor></b>\n");
 	printf("</p>\n");
 
@@ -1142,17 +1143,26 @@
 	if(temp_servicestatus->status!=SERVICE_OK && temp_servicestatus->status!=SERVICE_PENDING)
 		printf("<b><anchor title='Acknowledge Problem'>Acknowledge Problem<go href='#card3'/></anchor></b>\n");
 
-	if(temp_servicestatus->checks_enabled==FALSE)
-		printf("<b><anchor title='Enable Checks'>Enable Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='service' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),url_encode(service_desc),CMD_ENABLE_SVC_CHECK,CMDMODE_COMMIT);
+	if(temp_servicestatus->checks_enabled==FALSE){
+		printf("<b><anchor title='Enable Checks'>Enable Checks<go href='%s' method='post'><postfield name='host' value='%s'/>",COMMAND_CGI,escape_string(host_name));
+		printf("<postfield name='service' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",escape_string(service_desc),CMD_ENABLE_SVC_CHECK,CMDMODE_COMMIT);
+		}
 	else{
-		printf("<b><anchor title='Disable Checks'>Disable Checks<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='service' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),url_encode(service_desc),CMD_DISABLE_SVC_CHECK,CMDMODE_COMMIT);
-		printf("<b><anchor title='Schedule Immediate Check'>Schedule Immediate Check<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='service' value='%s'/><postfield name='start_time' value='%lu'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),url_encode(service_desc),(unsigned long)current_time,CMD_SCHEDULE_SVC_CHECK,CMDMODE_COMMIT);
+		printf("<b><anchor title='Disable Checks'>Disable Checks<go href='%s' method='post'><postfield name='host' value='%s'/>",COMMAND_CGI,escape_string(host_name));
+		printf("<postfield name='service' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",escape_string(service_desc),CMD_DISABLE_SVC_CHECK,CMDMODE_COMMIT);
+
+		printf("<b><anchor title='Schedule Immediate Check'>Schedule Immediate Check<go href='%s' method='post'><postfield name='host' value='%s'/>",COMMAND_CGI,escape_string(host_name));
+		printf("<postfield name='service' value='%s'/><postfield name='start_time' value='%lu'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",escape_string(service_desc),(unsigned long)current_time,CMD_SCHEDULE_SVC_CHECK,CMDMODE_COMMIT);
 	        }
 
-	if(temp_servicestatus->notifications_enabled==FALSE)
-		printf("<b><anchor title='Enable Notifications'>Enable Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='service' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),url_encode(service_desc),CMD_ENABLE_SVC_NOTIFICATIONS,CMDMODE_COMMIT);
-	else
-		printf("<b><anchor title='Disable Notifications'>Disable Notifications<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='service' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",COMMAND_CGI,url_encode(host_name),url_encode(service_desc),CMD_DISABLE_SVC_NOTIFICATIONS,CMDMODE_COMMIT);
+	if(temp_servicestatus->notifications_enabled==FALSE){
+		printf("<b><anchor title='Enable Notifications'>Enable Notifications<go href='%s' method='post'><postfield name='host' value='%s'/>",COMMAND_CGI,escape_string(host_name));
+		printf("<postfield name='service' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",escape_string(service_desc),CMD_ENABLE_SVC_NOTIFICATIONS,CMDMODE_COMMIT);
+		}
+	else{
+		printf("<b><anchor title='Disable Notifications'>Disable Notifications<go href='%s' method='post'><postfield name='host' value='%s'/>",COMMAND_CGI,escape_string(host_name));
+		printf("<postfield name='service' value='%s'/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go></anchor></b><br/>\n",escape_string(service_desc),CMD_DISABLE_SVC_NOTIFICATIONS,CMDMODE_COMMIT);
+		}
 
 	printf("</p>\n");
 
@@ -1172,7 +1182,8 @@
 	printf("<input name='comment' value='acknowledged by WAP'/>\n");
 
 	printf("<do type='accept'>\n");
-	printf("<go href='%s' method='post'><postfield name='host' value='%s'/><postfield name='service' value='%s'/><postfield name='com_author' value='$(name)'/><postfield name='com_data' value='$(comment)'/><postfield name='persistent' value=''/><postfield name='send_notification' value=''/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go>\n",COMMAND_CGI,url_encode(host_name),url_encode(service_desc),CMD_ACKNOWLEDGE_SVC_PROBLEM,CMDMODE_COMMIT);
+	printf("<go href='%s' method='post'><postfield name='host' value='%s'/>",COMMAND_CGI,escape_string(host_name));
+	printf("<postfield name='service' value='%s'/><postfield name='com_author' value='$(name)'/><postfield name='com_data' value='$(comment)'/><postfield name='persistent' value=''/><postfield name='send_notification' value=''/><postfield name='cmd_typ' value='%d'/><postfield name='cmd_mod' value='%d'/><postfield name='content' value='wml'/></go>\n",escape_string(service_desc),CMD_ACKNOWLEDGE_SVC_PROBLEM,CMDMODE_COMMIT);
 	printf("</do>\n");
 
 	printf("</p>\n");
diff -urNad nagios3-3.0.3~/cgi/summary.c nagios3-3.0.3/cgi/summary.c
--- nagios3-3.0.3~/cgi/summary.c	2008-01-24 03:51:30.000000000 +0100
+++ nagios3-3.0.3/cgi/summary.c	2008-11-28 21:17:31.000000000 +0100
@@ -588,7 +588,7 @@
 		printf("<option value='all'>** ALL HOSTGROUPS **\n");
 		for(temp_hostgroup=hostgroup_list;temp_hostgroup!=NULL;temp_hostgroup=temp_hostgroup->next){
 			if(is_authorized_for_hostgroup(temp_hostgroup,&current_authdata)==TRUE)
-				printf("<option value='%s'>%s\n",temp_hostgroup->group_name,temp_hostgroup->group_name);
+				printf("<option value='%s'>%s\n",escape_string(temp_hostgroup->group_name),temp_hostgroup->group_name);
 		        }
 		printf("</select>\n");
 		printf("</td></tr>\n");
@@ -598,7 +598,7 @@
 		printf("<option value='all'>** ALL SERVICEGROUPS **\n");
 		for(temp_servicegroup=servicegroup_list;temp_servicegroup!=NULL;temp_servicegroup=temp_servicegroup->next){
 			if(is_authorized_for_servicegroup(temp_servicegroup,&current_authdata)==TRUE)
-				printf("<option value='%s'>%s\n",temp_servicegroup->group_name,temp_servicegroup->group_name);
+				printf("<option value='%s'>%s\n",escape_string(temp_servicegroup->group_name),temp_servicegroup->group_name);
 		        }
 		printf("</select>\n");
 		printf("</td></tr>\n");
@@ -609,7 +609,7 @@
 
 		for(temp_host=host_list;temp_host!=NULL;temp_host=temp_host->next){
 			if(is_authorized_for_host(temp_host,&current_authdata)==TRUE)
-				printf("<option value='%s'>%s\n",temp_host->name,temp_host->name);
+				printf("<option value='%s'>%s\n",escape_string(temp_host->name),temp_host->name);
 		        }
 		printf("</select>\n");
 		printf("</td></tr>\n");
diff -urNad nagios3-3.0.3~/cgi/trends.c nagios3-3.0.3/cgi/trends.c
--- nagios3-3.0.3~/cgi/trends.c	2008-06-23 22:47:46.000000000 +0200
+++ nagios3-3.0.3/cgi/trends.c	2008-11-28 21:17:31.000000000 +0100
@@ -3,7 +3,7 @@
  * TRENDS.C -  Nagios State Trends CGI
  *
  * Copyright (c) 1999-2008 Ethan Galstad (nagios@nagios.org)
- * Last Modified: 06-23-2008
+ * Last Modified: 10-15-2008
  *
  * License:
  * 
@@ -454,9 +454,9 @@
 				printf("<input type='hidden' name='nomap' value=''>\n");
 			printf("<input type='hidden' name='t1' value='%lu'>\n",(unsigned long)t1);
 			printf("<input type='hidden' name='t2' value='%lu'>\n",(unsigned long)t2);
-			printf("<input type='hidden' name='host' value='%s'>\n",url_encode(host_name));
+			printf("<input type='hidden' name='host' value='%s'>\n",escape_string(host_name));
 			if(display_type==DISPLAY_SERVICE_TRENDS)
-				printf("<input type='hidden' name='service' value='%s'>\n",url_encode(svc_description));
+				printf("<input type='hidden' name='service' value='%s'>\n",escape_string(svc_description));
 
 			printf("<input type='hidden' name='assumeinitialstates' value='%s'>\n",(assume_initial_states==TRUE)?"yes":"no");
 			printf("<input type='hidden' name='assumestateretention' value='%s'>\n",(assume_state_retention==TRUE)?"yes":"no");
@@ -809,7 +809,7 @@
 
 			for(temp_host=host_list;temp_host!=NULL;temp_host=temp_host->next){
 				if(is_authorized_for_host(temp_host,&current_authdata)==TRUE)
-					printf("<option value='%s'>%s\n",temp_host->name,temp_host->name);
+					printf("<option value='%s'>%s\n",escape_string(temp_host->name),temp_host->name);
 			        }
 
 			printf("</select>\n");
@@ -858,7 +858,7 @@
 			printf("<TABLE BORDER=0 cellpadding=5>\n");
 			printf("<form method=\"GET\" action=\"%s\" name=\"serviceform\">\n",TRENDS_CGI);
 			printf("<input type='hidden' name='input' value='getoptions'>\n");
-			printf("<input type='hidden' name='host' value='%s'>\n",(first_service==NULL)?"unknown":first_service);
+			printf("<input type='hidden' name='host' value='%s'>\n",(first_service==NULL)?"unknown":(char *)escape_string(first_service));
 
 			printf("<tr><td class='reportSelectSubTitle'>Service:</td>\n");
 			printf("<td class='reportSelectItem'>\n");
@@ -866,7 +866,7 @@
 
 			for(temp_service=service_list;temp_service!=NULL;temp_service=temp_service->next){
 				if(is_authorized_for_service(temp_service,&current_authdata)==TRUE)
-					printf("<option value='%s'>%s;%s\n",temp_service->description,temp_service->host_name,temp_service->description);
+					printf("<option value='%s'>%s;%s\n",escape_string(temp_service->description),temp_service->host_name,temp_service->description);
 		                }
 
 			printf("</select>\n");
@@ -901,9 +901,9 @@
 
 			printf("<TABLE BORDER=0 CELLPADDING=5>\n");
 			printf("<form method=\"GET\" action=\"%s\">\n",TRENDS_CGI);
-			printf("<input type='hidden' name='host' value='%s'>\n",host_name);
+			printf("<input type='hidden' name='host' value='%s'>\n",escape_string(host_name));
 			if(display_type==DISPLAY_SERVICE_TRENDS)
-				printf("<input type='hidden' name='service' value='%s'>\n",svc_description);
+				printf("<input type='hidden' name='service' value='%s'>\n",escape_string(svc_description));
 
 			printf("<tr><td class='reportSelectSubTitle' align=right>Report period:</td>\n");
 			printf("<td class='reportSelectItem'>\n");
diff -urNad nagios3-3.0.3~/include/cgiutils.h.in nagios3-3.0.3/include/cgiutils.h.in
--- nagios3-3.0.3~/include/cgiutils.h.in	2007-11-11 00:34:26.000000000 +0100
+++ nagios3-3.0.3/include/cgiutils.h.in	2008-11-28 21:17:31.000000000 +0100
@@ -1,8 +1,8 @@
 /************************************************************************
  *
  * CGIUTILS.H - Header file for common CGI functions
- * Copyright (c) 1999-2007  Ethan Galstad (nagios@nagios.org)
- * Last Modified: 10-18-2007
+ * Copyright (c) 1999-2008  Ethan Galstad (nagios@nagios.org)
+ * Last Modified: 10-15-2008
  *
  * License:
  * 
@@ -484,6 +484,7 @@
 
 char * url_encode(char *);		        		/* encodes a string in proper URL format */
 char * html_encode(char *,int);					/* encodes a string in HTML format (for what the user sees) */
+char * escape_string(char *);					/* escape string for html form usage */
 
 void get_time_breakdown(unsigned long,int *,int *,int *,int *);	/* given total seconds, get days, hours, minutes, seconds */
 
